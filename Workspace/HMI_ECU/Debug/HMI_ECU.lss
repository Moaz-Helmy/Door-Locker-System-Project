
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c6  00800060  00003700  00003794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800226  00800226  0000395a  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  0000395c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ab  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cd72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e0       	ldi	r26, 0x0A	; 10
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e0       	ldi	r22, 0x0A	; 10
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 12 1b 	jmp	0x3624	; 0x3624 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 5e       	subi	r30, 0xEE	; 238
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
};
/*******************************************************************************
 *                      Main Function Definition                               *
 *******************************************************************************/
int main(void)
{
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	ce 58       	subi	r28, 0x8E	; 142
     e3c:	d0 40       	sbci	r29, 0x00	; 0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	/*Configuration Structure For UART*/
	UART_ConfigType UART_Config_Struct={
			PARITY_DISABLED,ONE_STOP,EIGHT_BITS,9600
	};
     e48:	ce 01       	movw	r24, r28
     e4a:	8b 58       	subi	r24, 0x8B	; 139
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	c6 57       	subi	r28, 0x76	; 118
     e50:	df 4f       	sbci	r29, 0xFF	; 255
     e52:	99 83       	std	Y+1, r25	; 0x01
     e54:	88 83       	st	Y, r24
     e56:	ca 58       	subi	r28, 0x8A	; 138
     e58:	d0 40       	sbci	r29, 0x00	; 0
     e5a:	8f e1       	ldi	r24, 0x1F	; 31
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	c4 57       	subi	r28, 0x74	; 116
     e60:	df 4f       	sbci	r29, 0xFF	; 255
     e62:	99 83       	std	Y+1, r25	; 0x01
     e64:	88 83       	st	Y, r24
     e66:	cc 58       	subi	r28, 0x8C	; 140
     e68:	d0 40       	sbci	r29, 0x00	; 0
     e6a:	97 e0       	ldi	r25, 0x07	; 7
     e6c:	c2 57       	subi	r28, 0x72	; 114
     e6e:	df 4f       	sbci	r29, 0xFF	; 255
     e70:	98 83       	st	Y, r25
     e72:	ce 58       	subi	r28, 0x8E	; 142
     e74:	d0 40       	sbci	r29, 0x00	; 0
     e76:	c4 57       	subi	r28, 0x74	; 116
     e78:	df 4f       	sbci	r29, 0xFF	; 255
     e7a:	e8 81       	ld	r30, Y
     e7c:	f9 81       	ldd	r31, Y+1	; 0x01
     e7e:	cc 58       	subi	r28, 0x8C	; 140
     e80:	d0 40       	sbci	r29, 0x00	; 0
     e82:	00 80       	ld	r0, Z
     e84:	c4 57       	subi	r28, 0x74	; 116
     e86:	df 4f       	sbci	r29, 0xFF	; 255
     e88:	88 81       	ld	r24, Y
     e8a:	99 81       	ldd	r25, Y+1	; 0x01
     e8c:	cc 58       	subi	r28, 0x8C	; 140
     e8e:	d0 40       	sbci	r29, 0x00	; 0
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	c4 57       	subi	r28, 0x74	; 116
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	99 83       	std	Y+1, r25	; 0x01
     e98:	88 83       	st	Y, r24
     e9a:	cc 58       	subi	r28, 0x8C	; 140
     e9c:	d0 40       	sbci	r29, 0x00	; 0
     e9e:	c6 57       	subi	r28, 0x76	; 118
     ea0:	df 4f       	sbci	r29, 0xFF	; 255
     ea2:	e8 81       	ld	r30, Y
     ea4:	f9 81       	ldd	r31, Y+1	; 0x01
     ea6:	ca 58       	subi	r28, 0x8A	; 138
     ea8:	d0 40       	sbci	r29, 0x00	; 0
     eaa:	00 82       	st	Z, r0
     eac:	c6 57       	subi	r28, 0x76	; 118
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	88 81       	ld	r24, Y
     eb2:	99 81       	ldd	r25, Y+1	; 0x01
     eb4:	ca 58       	subi	r28, 0x8A	; 138
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	c6 57       	subi	r28, 0x76	; 118
     ebc:	df 4f       	sbci	r29, 0xFF	; 255
     ebe:	99 83       	std	Y+1, r25	; 0x01
     ec0:	88 83       	st	Y, r24
     ec2:	ca 58       	subi	r28, 0x8A	; 138
     ec4:	d0 40       	sbci	r29, 0x00	; 0
     ec6:	c2 57       	subi	r28, 0x72	; 114
     ec8:	df 4f       	sbci	r29, 0xFF	; 255
     eca:	98 81       	ld	r25, Y
     ecc:	ce 58       	subi	r28, 0x8E	; 142
     ece:	d0 40       	sbci	r29, 0x00	; 0
     ed0:	91 50       	subi	r25, 0x01	; 1
     ed2:	c2 57       	subi	r28, 0x72	; 114
     ed4:	df 4f       	sbci	r29, 0xFF	; 255
     ed6:	98 83       	st	Y, r25
     ed8:	ce 58       	subi	r28, 0x8E	; 142
     eda:	d0 40       	sbci	r29, 0x00	; 0
     edc:	c2 57       	subi	r28, 0x72	; 114
     ede:	df 4f       	sbci	r29, 0xFF	; 255
     ee0:	e8 81       	ld	r30, Y
     ee2:	ce 58       	subi	r28, 0x8E	; 142
     ee4:	d0 40       	sbci	r29, 0x00	; 0
     ee6:	ee 23       	and	r30, r30
     ee8:	31 f6       	brne	.-116    	; 0xe76 <main+0x48>

	/*
	 * Flag responsible for executing or skipping the snippet of code that is responsible for reading and checking
	 * The password entered by the user.
	 */
	boolean passStep_flag=TRUE;
     eea:	fe 01       	movw	r30, r28
     eec:	ed 58       	subi	r30, 0x8D	; 141
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 83       	st	Z, r24

	/*
	 * Flag responsible for executing or skipping the snippet of code that is responsible for displaying the main
	 * options and take input from the user. (+: open door, -: change password).
	 */
	boolean optionStep_flag=TRUE;
     ef4:	fe 01       	movw	r30, r28
     ef6:	ee 58       	subi	r30, 0x8E	; 142
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 83       	st	Z, r24
	 * Note: It's of size 7 because it stores 5 chars of the password and the '#' to be able to send it via UART.
	 */
	uint8 pass_two[7];

	/********************HARDWARE INITIALIZATIONS********************/
	LCD_init();
     efe:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_init>
	UART_init(&UART_Config_Struct);
     f02:	ce 01       	movw	r24, r28
     f04:	8b 58       	subi	r24, 0x8B	; 139
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <UART_init>

	/*Enable The global interrupts (I-bit)*/
	SREG|=(1<<7);
     f0c:	af e5       	ldi	r26, 0x5F	; 95
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef e5       	ldi	r30, 0x5F	; 95
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24
     f1a:	e4 c0       	rjmp	.+456    	; 0x10e4 <main+0x2b6>
	{
		/*Step 1: Receive the 2 passwords entered by the user from HMI ECU*/
		while(passStep_flag==TRUE)
		{
			/*Enter the first password*/
			enterPass(pass_one,TRUE);
     f1c:	ce 01       	movw	r24, r28
     f1e:	84 58       	subi	r24, 0x84	; 132
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>

			/*Enter the second password*/
			enterPass(pass_two, FALSE);
     f28:	ce 01       	movw	r24, r28
     f2a:	8d 57       	subi	r24, 0x7D	; 125
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>

			/*Send the first password to the Control ECU*/
			UART_sendString(pass_one);
     f34:	ce 01       	movw	r24, r28
     f36:	84 58       	subi	r24, 0x84	; 132
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>
     f3e:	fe 01       	movw	r30, r28
     f40:	e3 59       	subi	r30, 0x93	; 147
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a8 ec       	ldi	r26, 0xC8	; 200
     f4a:	b1 e4       	ldi	r27, 0x41	; 65
     f4c:	80 83       	st	Z, r24
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	a2 83       	std	Z+2, r26	; 0x02
     f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f54:	8e 01       	movw	r16, r28
     f56:	07 59       	subi	r16, 0x97	; 151
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	fe 01       	movw	r30, r28
     f5c:	e3 59       	subi	r30, 0x93	; 147
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4a e7       	ldi	r20, 0x7A	; 122
     f6e:	53 e4       	ldi	r21, 0x43	; 67
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	f8 01       	movw	r30, r16
     f7a:	80 83       	st	Z, r24
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	a2 83       	std	Z+2, r26	; 0x02
     f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f82:	fe 01       	movw	r30, r28
     f84:	e7 59       	subi	r30, 0x97	; 151
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	44 f4       	brge	.+16     	; 0xfb0 <main+0x182>
		__ticks = 1;
     fa0:	fe 01       	movw	r30, r28
     fa2:	e9 59       	subi	r30, 0x99	; 153
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
     fae:	64 c0       	rjmp	.+200    	; 0x1078 <main+0x24a>
	else if (__tmp > 65535)
     fb0:	fe 01       	movw	r30, r28
     fb2:	e7 59       	subi	r30, 0x97	; 151
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <main+0x1a2>
     fce:	43 c0       	rjmp	.+134    	; 0x1056 <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	fe 01       	movw	r30, r28
     fd2:	e3 59       	subi	r30, 0x93	; 147
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8e 01       	movw	r16, r28
     ff0:	09 59       	subi	r16, 0x99	; 153
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	f8 01       	movw	r30, r16
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
    1006:	1f c0       	rjmp	.+62     	; 0x1046 <main+0x218>
    1008:	fe 01       	movw	r30, r28
    100a:	eb 59       	subi	r30, 0x9B	; 155
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1016:	fe 01       	movw	r30, r28
    1018:	eb 59       	subi	r30, 0x9B	; 155
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <main+0x1f2>
    1024:	fe 01       	movw	r30, r28
    1026:	eb 59       	subi	r30, 0x9B	; 155
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	de 01       	movw	r26, r28
    1030:	a9 59       	subi	r26, 0x99	; 153
    1032:	bf 4f       	sbci	r27, 0xFF	; 255
    1034:	fe 01       	movw	r30, r28
    1036:	e9 59       	subi	r30, 0x99	; 153
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	9c 93       	st	X, r25
    1044:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	fe 01       	movw	r30, r28
    1048:	e9 59       	subi	r30, 0x99	; 153
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	d1 f6       	brne	.-76     	; 0x1008 <main+0x1da>
    1054:	27 c0       	rjmp	.+78     	; 0x10a4 <main+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	8e 01       	movw	r16, r28
    1058:	09 59       	subi	r16, 0x99	; 153
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e7 59       	subi	r30, 0x97	; 151
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	f8 01       	movw	r30, r16
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
    1078:	de 01       	movw	r26, r28
    107a:	ad 59       	subi	r26, 0x9D	; 157
    107c:	bf 4f       	sbci	r27, 0xFF	; 255
    107e:	fe 01       	movw	r30, r28
    1080:	e9 59       	subi	r30, 0x99	; 153
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	8d 93       	st	X+, r24
    108a:	9c 93       	st	X, r25
    108c:	fe 01       	movw	r30, r28
    108e:	ed 59       	subi	r30, 0x9D	; 157
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <main+0x268>
    109a:	fe 01       	movw	r30, r28
    109c:	ed 59       	subi	r30, 0x9D	; 157
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24

			/*Hardware delay*/
			_delay_ms(25);

			/*Send the second password to the Control ECU*/
			UART_sendString(pass_two);
    10a4:	ce 01       	movw	r24, r28
    10a6:	8d 57       	subi	r24, 0x7D	; 125
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>

			/*Receive whether the two passwords match or not from the Control ECU*/
			pass_state=UART_recieveByte();
    10ae:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    10b2:	fe 01       	movw	r30, r28
    10b4:	ec 58       	subi	r30, 0x8C	; 140
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 83       	st	Z, r24

			if(pass_state==PASSWORD_PASSED)
    10ba:	fe 01       	movw	r30, r28
    10bc:	ec 58       	subi	r30, 0x8C	; 140
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	51 f4       	brne	.+20     	; 0x10da <main+0x2ac>
			{
				/*If the two passwords are matched, disable step one flag (passStep_flag)*/
				passStep_flag=FALSE;
    10c6:	fe 01       	movw	r30, r28
    10c8:	ed 58       	subi	r30, 0x8D	; 141
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	10 82       	st	Z, r1

				/*Enable the second step flag*/
				optionStep_flag=TRUE;
    10ce:	fe 01       	movw	r30, r28
    10d0:	ee 58       	subi	r30, 0x8E	; 142
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 83       	st	Z, r24
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <main+0x2b6>
			}
			else
			{
				/*If the two passwords aren't matched, stay at step 1*/
				passStep_flag=TRUE;
    10da:	fe 01       	movw	r30, r28
    10dc:	ed 58       	subi	r30, 0x8D	; 141
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24

	/********************PROGRAM LOGIC********************/
	while(1)
	{
		/*Step 1: Receive the 2 passwords entered by the user from HMI ECU*/
		while(passStep_flag==TRUE)
    10e4:	fe 01       	movw	r30, r28
    10e6:	ed 58       	subi	r30, 0x8D	; 141
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 81       	ld	r24, Z
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <main+0x2c4>
    10f0:	15 cf       	rjmp	.-470    	; 0xf1c <main+0xee>
    10f2:	9e c4       	rjmp	.+2364   	; 0x1a30 <main+0xc02>
		/*Step 2: display the main option to the user and get the input from him (+: Open door, -: change password_*/
		while(optionStep_flag==TRUE)
		{

			/*Display the main options and get the input*/
			optionStep_choice=displayAndChooseOptions();
    10f4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <displayAndChooseOptions>
    10f8:	fe 01       	movw	r30, r28
    10fa:	ef 58       	subi	r30, 0x8F	; 143
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 83       	st	Z, r24

			if(optionStep_choice=='+')
    1100:	fe 01       	movw	r30, r28
    1102:	ef 58       	subi	r30, 0x8F	; 143
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	8b 32       	cpi	r24, 0x2B	; 43
    110a:	09 f0       	breq	.+2      	; 0x110e <main+0x2e0>
    110c:	53 c2       	rjmp	.+1190   	; 0x15b4 <main+0x786>
			{
				/*If the user wants to open the door, prompt him to enter the password*/
				enterPass(pass_one, TRUE);
    110e:	ce 01       	movw	r24, r28
    1110:	84 58       	subi	r24, 0x84	; 132
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>

				/*Send the user choice to the Control ECU*/
				UART_sendByte('+');
    111a:	8b e2       	ldi	r24, 0x2B	; 43
    111c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <UART_sendByte>
    1120:	fe 01       	movw	r30, r28
    1122:	e1 5a       	subi	r30, 0xA1	; 161
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a8 ec       	ldi	r26, 0xC8	; 200
    112c:	b1 e4       	ldi	r27, 0x41	; 65
    112e:	80 83       	st	Z, r24
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	a2 83       	std	Z+2, r26	; 0x02
    1134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	8e 01       	movw	r16, r28
    1138:	05 5a       	subi	r16, 0xA5	; 165
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	fe 01       	movw	r30, r28
    113e:	e1 5a       	subi	r30, 0xA1	; 161
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	4a e7       	ldi	r20, 0x7A	; 122
    1150:	53 e4       	ldi	r21, 0x43	; 67
    1152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1164:	fe 01       	movw	r30, r28
    1166:	e5 5a       	subi	r30, 0xA5	; 165
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    117e:	88 23       	and	r24, r24
    1180:	44 f4       	brge	.+16     	; 0x1192 <main+0x364>
		__ticks = 1;
    1182:	fe 01       	movw	r30, r28
    1184:	e7 5a       	subi	r30, 0xA7	; 167
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
    1190:	64 c0       	rjmp	.+200    	; 0x125a <main+0x42c>
	else if (__tmp > 65535)
    1192:	fe 01       	movw	r30, r28
    1194:	e5 5a       	subi	r30, 0xA5	; 165
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	0c f0       	brlt	.+2      	; 0x11b2 <main+0x384>
    11b0:	43 c0       	rjmp	.+134    	; 0x1238 <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	fe 01       	movw	r30, r28
    11b4:	e1 5a       	subi	r30, 0xA1	; 161
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e2       	ldi	r20, 0x20	; 32
    11c6:	51 e4       	ldi	r21, 0x41	; 65
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8e 01       	movw	r16, r28
    11d2:	07 5a       	subi	r16, 0xA7	; 167
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	1f c0       	rjmp	.+62     	; 0x1228 <main+0x3fa>
    11ea:	fe 01       	movw	r30, r28
    11ec:	e9 5a       	subi	r30, 0xA9	; 169
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	89 e1       	ldi	r24, 0x19	; 25
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	fe 01       	movw	r30, r28
    11fa:	e9 5a       	subi	r30, 0xA9	; 169
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <main+0x3d4>
    1206:	fe 01       	movw	r30, r28
    1208:	e9 5a       	subi	r30, 0xA9	; 169
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1210:	de 01       	movw	r26, r28
    1212:	a7 5a       	subi	r26, 0xA7	; 167
    1214:	bf 4f       	sbci	r27, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e7 5a       	subi	r30, 0xA7	; 167
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	9c 93       	st	X, r25
    1226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	fe 01       	movw	r30, r28
    122a:	e7 5a       	subi	r30, 0xA7	; 167
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	d1 f6       	brne	.-76     	; 0x11ea <main+0x3bc>
    1236:	27 c0       	rjmp	.+78     	; 0x1286 <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	8e 01       	movw	r16, r28
    123a:	07 5a       	subi	r16, 0xA7	; 167
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e5 5a       	subi	r30, 0xA5	; 165
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	de 01       	movw	r26, r28
    125c:	ab 5a       	subi	r26, 0xAB	; 171
    125e:	bf 4f       	sbci	r27, 0xFF	; 255
    1260:	fe 01       	movw	r30, r28
    1262:	e7 5a       	subi	r30, 0xA7	; 167
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	8d 93       	st	X+, r24
    126c:	9c 93       	st	X, r25
    126e:	fe 01       	movw	r30, r28
    1270:	eb 5a       	subi	r30, 0xAB	; 171
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <main+0x44a>
    127c:	fe 01       	movw	r30, r28
    127e:	eb 5a       	subi	r30, 0xAB	; 171
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24

				/*Hardware delay*/
				_delay_ms(25);

				/*Send the entered password to the Control ECU to be compared with the one saved in the EEPROM*/
				UART_sendString(pass_one);
    1286:	ce 01       	movw	r24, r28
    1288:	84 58       	subi	r24, 0x84	; 132
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>

				/*Receive whether the password is correct or not*/
				pass_state=UART_recieveByte();
    1290:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    1294:	fe 01       	movw	r30, r28
    1296:	ec 58       	subi	r30, 0x8C	; 140
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 83       	st	Z, r24
    129c:	4f c1       	rjmp	.+670    	; 0x153c <main+0x70e>

				while(pass_state==PASSWORD_FAILED)
				{
					LCD_clearScreen();
    129e:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    12a2:	80 e6       	ldi	r24, 0x60	; 96
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
    12aa:	fe 01       	movw	r30, r28
    12ac:	ef 5a       	subi	r30, 0xAF	; 175
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	aa e7       	ldi	r26, 0x7A	; 122
    12b6:	b4 e4       	ldi	r27, 0x44	; 68
    12b8:	80 83       	st	Z, r24
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	a2 83       	std	Z+2, r26	; 0x02
    12be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	8e 01       	movw	r16, r28
    12c2:	03 5b       	subi	r16, 0xB3	; 179
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	fe 01       	movw	r30, r28
    12c8:	ef 5a       	subi	r30, 0xAF	; 175
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	4a e7       	ldi	r20, 0x7A	; 122
    12da:	53 e4       	ldi	r21, 0x43	; 67
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ee:	fe 01       	movw	r30, r28
    12f0:	e3 5b       	subi	r30, 0xB3	; 179
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	44 f4       	brge	.+16     	; 0x131c <main+0x4ee>
		__ticks = 1;
    130c:	fe 01       	movw	r30, r28
    130e:	e5 5b       	subi	r30, 0xB5	; 181
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	64 c0       	rjmp	.+200    	; 0x13e4 <main+0x5b6>
	else if (__tmp > 65535)
    131c:	fe 01       	movw	r30, r28
    131e:	e3 5b       	subi	r30, 0xB3	; 179
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	0c f0       	brlt	.+2      	; 0x133c <main+0x50e>
    133a:	43 c0       	rjmp	.+134    	; 0x13c2 <main+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	fe 01       	movw	r30, r28
    133e:	ef 5a       	subi	r30, 0xAF	; 175
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8e 01       	movw	r16, r28
    135c:	05 5b       	subi	r16, 0xB5	; 181
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	1f c0       	rjmp	.+62     	; 0x13b2 <main+0x584>
    1374:	fe 01       	movw	r30, r28
    1376:	e7 5b       	subi	r30, 0xB7	; 183
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	89 e1       	ldi	r24, 0x19	; 25
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	fe 01       	movw	r30, r28
    1384:	e7 5b       	subi	r30, 0xB7	; 183
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <main+0x55e>
    1390:	fe 01       	movw	r30, r28
    1392:	e7 5b       	subi	r30, 0xB7	; 183
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	de 01       	movw	r26, r28
    139c:	a5 5b       	subi	r26, 0xB5	; 181
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	e5 5b       	subi	r30, 0xB5	; 181
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	9c 93       	st	X, r25
    13b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	fe 01       	movw	r30, r28
    13b4:	e5 5b       	subi	r30, 0xB5	; 181
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	d1 f6       	brne	.-76     	; 0x1374 <main+0x546>
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <main+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	8e 01       	movw	r16, r28
    13c4:	05 5b       	subi	r16, 0xB5	; 181
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	fe 01       	movw	r30, r28
    13ca:	e3 5b       	subi	r30, 0xB3	; 179
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	de 01       	movw	r26, r28
    13e6:	a9 5b       	subi	r26, 0xB9	; 185
    13e8:	bf 4f       	sbci	r27, 0xFF	; 255
    13ea:	fe 01       	movw	r30, r28
    13ec:	e5 5b       	subi	r30, 0xB5	; 181
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	8d 93       	st	X+, r24
    13f6:	9c 93       	st	X, r25
    13f8:	fe 01       	movw	r30, r28
    13fa:	e9 5b       	subi	r30, 0xB9	; 185
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <main+0x5d4>
    1406:	fe 01       	movw	r30, r28
    1408:	e9 5b       	subi	r30, 0xB9	; 185
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
					_delay_ms(1000);

					/*If the password isn't correct, enter the password again; the user has three attempts*/
					enterPass(pass_one, TRUE);
    1410:	ce 01       	movw	r24, r28
    1412:	84 58       	subi	r24, 0x84	; 132
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>
    141c:	fe 01       	movw	r30, r28
    141e:	ed 5b       	subi	r30, 0xBD	; 189
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a8 ec       	ldi	r26, 0xC8	; 200
    1428:	b1 e4       	ldi	r27, 0x41	; 65
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	8e 01       	movw	r16, r28
    1434:	01 5c       	subi	r16, 0xC1	; 193
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	ed 5b       	subi	r30, 0xBD	; 189
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	80 83       	st	Z, r24
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	a2 83       	std	Z+2, r26	; 0x02
    145e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1460:	fe 01       	movw	r30, r28
    1462:	ff 96       	adiw	r30, 0x3f	; 63
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <main+0x658>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9e af       	std	Y+62, r25	; 0x3e
    1482:	8d af       	std	Y+61, r24	; 0x3d
    1484:	46 c0       	rjmp	.+140    	; 0x1512 <main+0x6e4>
	else if (__tmp > 65535)
    1486:	fe 01       	movw	r30, r28
    1488:	ff 96       	adiw	r30, 0x3f	; 63
    148a:	60 81       	ld	r22, Z
    148c:	71 81       	ldd	r23, Z+1	; 0x01
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	64 f5       	brge	.+88     	; 0x14fa <main+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	fe 01       	movw	r30, r28
    14a4:	ed 5b       	subi	r30, 0xBD	; 189
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9e af       	std	Y+62, r25	; 0x3e
    14ce:	8d af       	std	Y+61, r24	; 0x3d
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <main+0x6c2>
    14d2:	89 e1       	ldi	r24, 0x19	; 25
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c af       	std	Y+60, r25	; 0x3c
    14d8:	8b af       	std	Y+59, r24	; 0x3b
    14da:	8b ad       	ldd	r24, Y+59	; 0x3b
    14dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <main+0x6b0>
    14e2:	9c af       	std	Y+60, r25	; 0x3c
    14e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    14e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	9e af       	std	Y+62, r25	; 0x3e
    14ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    14f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	69 f7       	brne	.-38     	; 0x14d2 <main+0x6a4>
    14f8:	16 c0       	rjmp	.+44     	; 0x1526 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fa:	fe 01       	movw	r30, r28
    14fc:	ff 96       	adiw	r30, 0x3f	; 63
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9e af       	std	Y+62, r25	; 0x3e
    1510:	8d af       	std	Y+61, r24	; 0x3d
    1512:	8d ad       	ldd	r24, Y+61	; 0x3d
    1514:	9e ad       	ldd	r25, Y+62	; 0x3e
    1516:	9a af       	std	Y+58, r25	; 0x3a
    1518:	89 af       	std	Y+57, r24	; 0x39
    151a:	89 ad       	ldd	r24, Y+57	; 0x39
    151c:	9a ad       	ldd	r25, Y+58	; 0x3a
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <main+0x6f0>
    1522:	9a af       	std	Y+58, r25	; 0x3a
    1524:	89 af       	std	Y+57, r24	; 0x39

					/*Hardware delay*/
					_delay_ms(25);

					/*Send the entered password to the Control ECU to be compared with the one saved in the EEPROM*/
					UART_sendString(pass_one);
    1526:	ce 01       	movw	r24, r28
    1528:	84 58       	subi	r24, 0x84	; 132
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>

					/*Receive whether the password is correct or not*/
					pass_state=UART_recieveByte();
    1530:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    1534:	fe 01       	movw	r30, r28
    1536:	ec 58       	subi	r30, 0x8C	; 140
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 83       	st	Z, r24
				UART_sendString(pass_one);

				/*Receive whether the password is correct or not*/
				pass_state=UART_recieveByte();

				while(pass_state==PASSWORD_FAILED)
    153c:	fe 01       	movw	r30, r28
    153e:	ec 58       	subi	r30, 0x8C	; 140
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <main+0x71c>
    1548:	aa ce       	rjmp	.-684    	; 0x129e <main+0x470>

					/*Receive whether the password is correct or not*/
					pass_state=UART_recieveByte();
				}

				if(pass_state==THIEF)
    154a:	fe 01       	movw	r30, r28
    154c:	ec 58       	subi	r30, 0x8C	; 140
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	c9 f4       	brne	.+50     	; 0x1588 <main+0x75a>
				{
					/*If the user failed to enter the correct password three consecutive times, display an error message*/
					LCD_clearScreen();
    1556:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 5, "ERROR!");
    155a:	2f e6       	ldi	r18, 0x6F	; 111
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	65 e0       	ldi	r22, 0x05	; 5
    1562:	a9 01       	movw	r20, r18
    1564:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>

					/*Display the error message for 1 minute*/
					/*Start the timer to count 1 minute*/
					Timer1_setCallBack(callBack);
    1568:	80 ed       	ldi	r24, 0xD0	; 208
    156a:	9e e0       	ldi	r25, 0x0E	; 14
    156c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <Timer1_setCallBack>
					Timer1_init(&Timer1_Delay_Struct);
    1570:	88 e1       	ldi	r24, 0x18	; 24
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>
					g_timer_delay_flag=TRUE;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 27 02 	sts	0x0227, r24

					/*Wait until the timer is done*/
					while(g_timer_delay_flag==TRUE);
    157e:	80 91 27 02 	lds	r24, 0x0227
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	e1 f3       	breq	.-8      	; 0x157e <main+0x750>
    1586:	54 c2       	rjmp	.+1192   	; 0x1a30 <main+0xc02>

					/*Continue to return to the main options menu again*/
					continue;
				}
				else if(pass_state==PASSWORD_PASSED)
    1588:	fe 01       	movw	r30, r28
    158a:	ec 58       	subi	r30, 0x8C	; 140
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 81       	ld	r24, Z
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f0       	breq	.+2      	; 0x1596 <main+0x768>
    1594:	4d c2       	rjmp	.+1178   	; 0x1a30 <main+0xc02>
				{
					/*Else if the the password is correct, start the timer to display the door state (unlocking, unlocked, locking)*/
					Timer1_setCallBack(callBack);
    1596:	80 ed       	ldi	r24, 0xD0	; 208
    1598:	9e e0       	ldi	r25, 0x0E	; 14
    159a:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <Timer1_setCallBack>
					Timer1_init(&Timer1_Config_Struct);
    159e:	82 e1       	ldi	r24, 0x12	; 18
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>

					/*Wait until the door is done opening and closing, .i.e, the time has finished*/
					while(!g_timer_is_finished);
    15a6:	80 91 26 02 	lds	r24, 0x0226
    15aa:	88 23       	and	r24, r24
    15ac:	e1 f3       	breq	.-8      	; 0x15a6 <main+0x778>

					/*Reset the timer flag*/
					g_timer_is_finished=FALSE;
    15ae:	10 92 26 02 	sts	0x0226, r1
    15b2:	3e c2       	rjmp	.+1148   	; 0x1a30 <main+0xc02>
				else
				{
					/*Do Nothing*/
				}
			}
			else if(optionStep_choice=='-')
    15b4:	fe 01       	movw	r30, r28
    15b6:	ef 58       	subi	r30, 0x8F	; 143
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 32       	cpi	r24, 0x2D	; 45
    15be:	09 f0       	breq	.+2      	; 0x15c2 <main+0x794>
    15c0:	37 c2       	rjmp	.+1134   	; 0x1a30 <main+0xc02>
			{
				/*If the user want to change the password, the user is prompted to enter the saved password first*/
				enterPass(pass_one, TRUE);
    15c2:	ce 01       	movw	r24, r28
    15c4:	84 58       	subi	r24, 0x84	; 132
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>

				/*Send the user choice to the Control ECU*/
				UART_sendByte('-');
    15ce:	8d e2       	ldi	r24, 0x2D	; 45
    15d0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <UART_sendByte>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a8 ec       	ldi	r26, 0xC8	; 200
    15da:	b1 e4       	ldi	r27, 0x41	; 65
    15dc:	8d ab       	std	Y+53, r24	; 0x35
    15de:	9e ab       	std	Y+54, r25	; 0x36
    15e0:	af ab       	std	Y+55, r26	; 0x37
    15e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	6d a9       	ldd	r22, Y+53	; 0x35
    15e6:	7e a9       	ldd	r23, Y+54	; 0x36
    15e8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ea:	98 ad       	ldd	r25, Y+56	; 0x38
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a e7       	ldi	r20, 0x7A	; 122
    15f2:	53 e4       	ldi	r21, 0x43	; 67
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	89 ab       	std	Y+49, r24	; 0x31
    15fe:	9a ab       	std	Y+50, r25	; 0x32
    1600:	ab ab       	std	Y+51, r26	; 0x33
    1602:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1604:	69 a9       	ldd	r22, Y+49	; 0x31
    1606:	7a a9       	ldd	r23, Y+50	; 0x32
    1608:	8b a9       	ldd	r24, Y+51	; 0x33
    160a:	9c a9       	ldd	r25, Y+52	; 0x34
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1618:	88 23       	and	r24, r24
    161a:	2c f4       	brge	.+10     	; 0x1626 <main+0x7f8>
		__ticks = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	98 ab       	std	Y+48, r25	; 0x30
    1622:	8f a7       	std	Y+47, r24	; 0x2f
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <main+0x876>
	else if (__tmp > 65535)
    1626:	69 a9       	ldd	r22, Y+49	; 0x31
    1628:	7a a9       	ldd	r23, Y+50	; 0x32
    162a:	8b a9       	ldd	r24, Y+51	; 0x33
    162c:	9c a9       	ldd	r25, Y+52	; 0x34
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	4c f5       	brge	.+82     	; 0x1690 <main+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163e:	6d a9       	ldd	r22, Y+53	; 0x35
    1640:	7e a9       	ldd	r23, Y+54	; 0x36
    1642:	8f a9       	ldd	r24, Y+55	; 0x37
    1644:	98 ad       	ldd	r25, Y+56	; 0x38
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e2       	ldi	r20, 0x20	; 32
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	98 ab       	std	Y+48, r25	; 0x30
    1664:	8f a7       	std	Y+47, r24	; 0x2f
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <main+0x858>
    1668:	89 e1       	ldi	r24, 0x19	; 25
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9e a7       	std	Y+46, r25	; 0x2e
    166e:	8d a7       	std	Y+45, r24	; 0x2d
    1670:	8d a5       	ldd	r24, Y+45	; 0x2d
    1672:	9e a5       	ldd	r25, Y+46	; 0x2e
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <main+0x846>
    1678:	9e a7       	std	Y+46, r25	; 0x2e
    167a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	8f a5       	ldd	r24, Y+47	; 0x2f
    167e:	98 a9       	ldd	r25, Y+48	; 0x30
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	8f a5       	ldd	r24, Y+47	; 0x2f
    1688:	98 a9       	ldd	r25, Y+48	; 0x30
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f7       	brne	.-38     	; 0x1668 <main+0x83a>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <main+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	69 a9       	ldd	r22, Y+49	; 0x31
    1692:	7a a9       	ldd	r23, Y+50	; 0x32
    1694:	8b a9       	ldd	r24, Y+51	; 0x33
    1696:	9c a9       	ldd	r25, Y+52	; 0x34
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	98 ab       	std	Y+48, r25	; 0x30
    16a2:	8f a7       	std	Y+47, r24	; 0x2f
    16a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a6:	98 a9       	ldd	r25, Y+48	; 0x30
    16a8:	9c a7       	std	Y+44, r25	; 0x2c
    16aa:	8b a7       	std	Y+43, r24	; 0x2b
    16ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <main+0x882>
    16b4:	9c a7       	std	Y+44, r25	; 0x2c
    16b6:	8b a7       	std	Y+43, r24	; 0x2b

				/*Hardware delay*/
				_delay_ms(25);

				/*Send the entered password to the control ECU to be checked*/
				UART_sendString(pass_one);
    16b8:	ce 01       	movw	r24, r28
    16ba:	84 58       	subi	r24, 0x84	; 132
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>

				/*Receive whether the password is correct or not*/
				pass_state=UART_recieveByte();
    16c2:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    16c6:	fe 01       	movw	r30, r28
    16c8:	ec 58       	subi	r30, 0x8C	; 140
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 83       	st	Z, r24
    16ce:	fb c0       	rjmp	.+502    	; 0x18c6 <main+0xa98>

				while(pass_state==PASSWORD_FAILED)
				{
					LCD_clearScreen();
    16d0:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    16d4:	80 e6       	ldi	r24, 0x60	; 96
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	aa e7       	ldi	r26, 0x7A	; 122
    16e2:	b4 e4       	ldi	r27, 0x44	; 68
    16e4:	8f a3       	std	Y+39, r24	; 0x27
    16e6:	98 a7       	std	Y+40, r25	; 0x28
    16e8:	a9 a7       	std	Y+41, r26	; 0x29
    16ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	6f a1       	ldd	r22, Y+39	; 0x27
    16ee:	78 a5       	ldd	r23, Y+40	; 0x28
    16f0:	89 a5       	ldd	r24, Y+41	; 0x29
    16f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a e7       	ldi	r20, 0x7A	; 122
    16fa:	53 e4       	ldi	r21, 0x43	; 67
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	8b a3       	std	Y+35, r24	; 0x23
    1706:	9c a3       	std	Y+36, r25	; 0x24
    1708:	ad a3       	std	Y+37, r26	; 0x25
    170a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    170c:	6b a1       	ldd	r22, Y+35	; 0x23
    170e:	7c a1       	ldd	r23, Y+36	; 0x24
    1710:	8d a1       	ldd	r24, Y+37	; 0x25
    1712:	9e a1       	ldd	r25, Y+38	; 0x26
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <main+0x900>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9a a3       	std	Y+34, r25	; 0x22
    172a:	89 a3       	std	Y+33, r24	; 0x21
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <main+0x97e>
	else if (__tmp > 65535)
    172e:	6b a1       	ldd	r22, Y+35	; 0x23
    1730:	7c a1       	ldd	r23, Y+36	; 0x24
    1732:	8d a1       	ldd	r24, Y+37	; 0x25
    1734:	9e a1       	ldd	r25, Y+38	; 0x26
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <main+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	6f a1       	ldd	r22, Y+39	; 0x27
    1748:	78 a5       	ldd	r23, Y+40	; 0x28
    174a:	89 a5       	ldd	r24, Y+41	; 0x29
    174c:	9a a5       	ldd	r25, Y+42	; 0x2a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9a a3       	std	Y+34, r25	; 0x22
    176c:	89 a3       	std	Y+33, r24	; 0x21
    176e:	0f c0       	rjmp	.+30     	; 0x178e <main+0x960>
    1770:	89 e1       	ldi	r24, 0x19	; 25
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 a3       	std	Y+32, r25	; 0x20
    1776:	8f 8f       	std	Y+31, r24	; 0x1f
    1778:	8f 8d       	ldd	r24, Y+31	; 0x1f
    177a:	98 a1       	ldd	r25, Y+32	; 0x20
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <main+0x94e>
    1780:	98 a3       	std	Y+32, r25	; 0x20
    1782:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	89 a1       	ldd	r24, Y+33	; 0x21
    1786:	9a a1       	ldd	r25, Y+34	; 0x22
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9a a3       	std	Y+34, r25	; 0x22
    178c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	89 a1       	ldd	r24, Y+33	; 0x21
    1790:	9a a1       	ldd	r25, Y+34	; 0x22
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <main+0x942>
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <main+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	6b a1       	ldd	r22, Y+35	; 0x23
    179a:	7c a1       	ldd	r23, Y+36	; 0x24
    179c:	8d a1       	ldd	r24, Y+37	; 0x25
    179e:	9e a1       	ldd	r25, Y+38	; 0x26
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9a a3       	std	Y+34, r25	; 0x22
    17aa:	89 a3       	std	Y+33, r24	; 0x21
    17ac:	89 a1       	ldd	r24, Y+33	; 0x21
    17ae:	9a a1       	ldd	r25, Y+34	; 0x22
    17b0:	9e 8f       	std	Y+30, r25	; 0x1e
    17b2:	8d 8f       	std	Y+29, r24	; 0x1d
    17b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <main+0x98a>
    17bc:	9e 8f       	std	Y+30, r25	; 0x1e
    17be:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);

					/*If the password isn't correct, enter the password again; the user has three attempts*/
					enterPass(pass_one, TRUE);
    17c0:	ce 01       	movw	r24, r28
    17c2:	84 58       	subi	r24, 0x84	; 132
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <enterPass>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a8 ec       	ldi	r26, 0xC8	; 200
    17d2:	b1 e4       	ldi	r27, 0x41	; 65
    17d4:	89 8f       	std	Y+25, r24	; 0x19
    17d6:	9a 8f       	std	Y+26, r25	; 0x1a
    17d8:	ab 8f       	std	Y+27, r26	; 0x1b
    17da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	69 8d       	ldd	r22, Y+25	; 0x19
    17de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	53 e4       	ldi	r21, 0x43	; 67
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8d 8b       	std	Y+21, r24	; 0x15
    17f6:	9e 8b       	std	Y+22, r25	; 0x16
    17f8:	af 8b       	std	Y+23, r26	; 0x17
    17fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	8f 89       	ldd	r24, Y+23	; 0x17
    1802:	98 8d       	ldd	r25, Y+24	; 0x18
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <main+0x9f0>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 8b       	std	Y+20, r25	; 0x14
    181a:	8b 8b       	std	Y+19, r24	; 0x13
    181c:	3f c0       	rjmp	.+126    	; 0x189c <main+0xa6e>
	else if (__tmp > 65535)
    181e:	6d 89       	ldd	r22, Y+21	; 0x15
    1820:	7e 89       	ldd	r23, Y+22	; 0x16
    1822:	8f 89       	ldd	r24, Y+23	; 0x17
    1824:	98 8d       	ldd	r25, Y+24	; 0x18
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <main+0xa5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	69 8d       	ldd	r22, Y+25	; 0x19
    1838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
    185e:	0f c0       	rjmp	.+30     	; 0x187e <main+0xa50>
    1860:	89 e1       	ldi	r24, 0x19	; 25
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9a 8b       	std	Y+18, r25	; 0x12
    1866:	89 8b       	std	Y+17, r24	; 0x11
    1868:	89 89       	ldd	r24, Y+17	; 0x11
    186a:	9a 89       	ldd	r25, Y+18	; 0x12
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <main+0xa3e>
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8b 89       	ldd	r24, Y+19	; 0x13
    1876:	9c 89       	ldd	r25, Y+20	; 0x14
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9c 8b       	std	Y+20, r25	; 0x14
    187c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <main+0xa32>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <main+0xa82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	6d 89       	ldd	r22, Y+21	; 0x15
    188a:	7e 89       	ldd	r23, Y+22	; 0x16
    188c:	8f 89       	ldd	r24, Y+23	; 0x17
    188e:	98 8d       	ldd	r25, Y+24	; 0x18
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
    189c:	8b 89       	ldd	r24, Y+19	; 0x13
    189e:	9c 89       	ldd	r25, Y+20	; 0x14
    18a0:	98 8b       	std	Y+16, r25	; 0x10
    18a2:	8f 87       	std	Y+15, r24	; 0x0f
    18a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a6:	98 89       	ldd	r25, Y+16	; 0x10
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <main+0xa7a>
    18ac:	98 8b       	std	Y+16, r25	; 0x10
    18ae:	8f 87       	std	Y+15, r24	; 0x0f

					/*Hardware delay*/
					_delay_ms(25);

					/*Send the entered password to the control ECU to be checked*/
					UART_sendString(pass_one);
    18b0:	ce 01       	movw	r24, r28
    18b2:	84 58       	subi	r24, 0x84	; 132
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	0e 94 96 1a 	call	0x352c	; 0x352c <UART_sendString>

					/*Receive whether the password is correct or not*/
					pass_state=UART_recieveByte();
    18ba:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    18be:	fe 01       	movw	r30, r28
    18c0:	ec 58       	subi	r30, 0x8C	; 140
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
				UART_sendString(pass_one);

				/*Receive whether the password is correct or not*/
				pass_state=UART_recieveByte();

				while(pass_state==PASSWORD_FAILED)
    18c6:	fe 01       	movw	r30, r28
    18c8:	ec 58       	subi	r30, 0x8C	; 140
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	88 23       	and	r24, r24
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <main+0xaa6>
    18d2:	fe ce       	rjmp	.-516    	; 0x16d0 <main+0x8a2>

					/*Receive whether the password is correct or not*/
					pass_state=UART_recieveByte();
				}

				if(pass_state==THIEF)
    18d4:	fe 01       	movw	r30, r28
    18d6:	ec 58       	subi	r30, 0x8C	; 140
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	c9 f4       	brne	.+50     	; 0x1912 <main+0xae4>
				{
					/*If the user failed to enter the correct password three consecutive times, display an error message*/
					LCD_clearScreen();
    18e0:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 5, "ERROR!");
    18e4:	2f e6       	ldi	r18, 0x6F	; 111
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	65 e0       	ldi	r22, 0x05	; 5
    18ec:	a9 01       	movw	r20, r18
    18ee:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>

					/*Display the error message for 1 minute*/
					/*Start the timer to count 1 minute*/
					Timer1_setCallBack(callBack);
    18f2:	80 ed       	ldi	r24, 0xD0	; 208
    18f4:	9e e0       	ldi	r25, 0x0E	; 14
    18f6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <Timer1_setCallBack>
					Timer1_init(&Timer1_Delay_Struct);
    18fa:	88 e1       	ldi	r24, 0x18	; 24
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>
					g_timer_delay_flag=TRUE;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 27 02 	sts	0x0227, r24

					/*Wait until the timer is done*/
					while(g_timer_delay_flag==TRUE);
    1908:	80 91 27 02 	lds	r24, 0x0227
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	e1 f3       	breq	.-8      	; 0x1908 <main+0xada>
    1910:	8f c0       	rjmp	.+286    	; 0x1a30 <main+0xc02>

					/*Continue to return to the main options menu again*/
					continue;
				}
				else if(pass_state==PASSWORD_PASSED)
    1912:	fe 01       	movw	r30, r28
    1914:	ec 58       	subi	r30, 0x8C	; 140
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	09 f0       	breq	.+2      	; 0x1920 <main+0xaf2>
    191e:	88 c0       	rjmp	.+272    	; 0x1a30 <main+0xc02>
				{
					LCD_clearScreen();
    1920:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
					LCD_displayString("Correct Password");
    1924:	86 e7       	ldi	r24, 0x76	; 118
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
					LCD_displayStringRowColumn(1, 0, "Reset Password");
    192c:	27 e8       	ldi	r18, 0x87	; 135
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	a9 01       	movw	r20, r18
    1936:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	aa e7       	ldi	r26, 0x7A	; 122
    1940:	b4 e4       	ldi	r27, 0x44	; 68
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	9c 87       	std	Y+12, r25	; 0x0c
    1946:	ad 87       	std	Y+13, r26	; 0x0d
    1948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6b 85       	ldd	r22, Y+11	; 0x0b
    194c:	7c 85       	ldd	r23, Y+12	; 0x0c
    194e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1950:	9e 85       	ldd	r25, Y+14	; 0x0e
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a e7       	ldi	r20, 0x7A	; 122
    1958:	53 e4       	ldi	r21, 0x43	; 67
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8f 83       	std	Y+7, r24	; 0x07
    1964:	98 87       	std	Y+8, r25	; 0x08
    1966:	a9 87       	std	Y+9, r26	; 0x09
    1968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <main+0xb5e>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <main+0xbdc>
	else if (__tmp > 65535)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <main+0xbc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <main+0xbbe>
    19ce:	89 e1       	ldi	r24, 0x19	; 25
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <main+0xbac>
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <main+0xba0>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <main+0xbf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <main+0xbe8>
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);

					/*If the password is correct, enable step one flag to return to reset password step*/
					passStep_flag=TRUE;
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ed 58       	subi	r30, 0x8D	; 141
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 83       	st	Z, r24

					/*Disable step 2 flag for now*/
					optionStep_flag=FALSE;
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ee 58       	subi	r30, 0x8E	; 142
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	10 82       	st	Z, r1
				passStep_flag=TRUE;
			}
		}

		/*Step 2: display the main option to the user and get the input from him (+: Open door, -: change password_*/
		while(optionStep_flag==TRUE)
    1a30:	fe 01       	movw	r30, r28
    1a32:	ee 58       	subi	r30, 0x8E	; 142
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <main+0xc10>
    1a3c:	5b cb       	rjmp	.-2378   	; 0x10f4 <main+0x2c6>
    1a3e:	52 cb       	rjmp	.-2396   	; 0x10e4 <main+0x2b6>

00001a40 <enterPass>:
/*
 * Description :
 * This function display a prompt to the user to enter the password whether to save it or to store it in EEPROM.
 */
void enterPass(uint8* pass,boolean isFirst)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	63 97       	sbiw	r28, 0x13	; 19
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	9a 8b       	std	Y+18, r25	; 0x12
    1a56:	89 8b       	std	Y+17, r24	; 0x11
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
	/*Variable to index the characters in the password to be saved*/
	uint8 pass_counter=0;
    1a5a:	18 8a       	std	Y+16, r1	; 0x10

	/*Variable to store the ascii of the pressed key on the keypad*/
	uint8 pressed_key;

	if(isFirst==1)
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	59 f4       	brne	.+22     	; 0x1a78 <enterPass+0x38>
	{
		/*If this is password 1, display messages related to this password*/
		LCD_clearScreen();
    1a62:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass: ");
    1a66:	86 e9       	ldi	r24, 0x96	; 150
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
		LCD_moveCursor(1, 0);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_moveCursor>
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <enterPass+0x54>
	}
	else
	{
		/*Else if this is password 2, prompt the user to reenter the same password entered at first*/
		LCD_clearScreen();
    1a78:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
		LCD_displayString("Plz Re-Enter the");
    1a7c:	87 ea       	ldi	r24, 0xA7	; 167
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
		LCD_moveCursor(1, 0);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_moveCursor>
		LCD_displayString("Same Pass:");
    1a8c:	88 eb       	ldi	r24, 0xB8	; 184
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
	}

	/*Loop to get and store the entered password using keypad*/
	for(pass_counter=0;pass_counter<PASSWORD_LIMIT;pass_counter++)
    1a94:	18 8a       	std	Y+16, r1	; 0x10
    1a96:	bf c0       	rjmp	.+382    	; 0x1c16 <enterPass+0x1d6>
	{
		/*Get ascii of the pressed key*/
		pressed_key=KEYPAD_getPressedKey();
    1a98:	0e 94 c7 12 	call	0x258e	; 0x258e <KEYPAD_getPressedKey>
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f

		if(pressed_key=='=')
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	8d 33       	cpi	r24, 0x3D	; 61
    1aa2:	b9 f4       	brne	.+46     	; 0x1ad2 <enterPass+0x92>
		{
			/*If the user pressed enter, add the '#' at the end of the string to be able to send it via UART to the Control ECU*/
			pass[pass_counter]='#';
    1aa4:	88 89       	ldd	r24, Y+16	; 0x10
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e2 0f       	add	r30, r18
    1ab2:	f3 1f       	adc	r31, r19
    1ab4:	83 e2       	ldi	r24, 0x23	; 35
    1ab6:	80 83       	st	Z, r24

			/*Lastly, add the null terminator '\0'*/
			pass[pass_counter+1]='\0';
    1ab8:	88 89       	ldd	r24, Y+16	; 0x10
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 01       	movw	r18, r24
    1ac0:	2f 5f       	subi	r18, 0xFF	; 255
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	89 89       	ldd	r24, Y+17	; 0x11
    1ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e2 0f       	add	r30, r18
    1acc:	f3 1f       	adc	r31, r19
    1ace:	10 82       	st	Z, r1
    1ad0:	a6 c0       	rjmp	.+332    	; 0x1c1e <enterPass+0x1de>

			/*End the loop*/
			break;
		}

		if(pass_counter==5)
    1ad2:	88 89       	ldd	r24, Y+16	; 0x10
    1ad4:	85 30       	cpi	r24, 0x05	; 5
    1ad6:	e9 f4       	brne	.+58     	; 0x1b12 <enterPass+0xd2>
		{
			/*At character number 6, wait for the user to press enter ('=')*/
			if(pressed_key=='=')
    1ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ada:	8d 33       	cpi	r24, 0x3D	; 61
    1adc:	b9 f4       	brne	.+46     	; 0x1b0c <enterPass+0xcc>
			{
				/*If the user pressed enter, add the '#' at the end of the string to be able to send it via UART to the Control ECU*/
				pass[pass_counter]='#';
    1ade:	88 89       	ldd	r24, Y+16	; 0x10
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	89 89       	ldd	r24, Y+17	; 0x11
    1ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae8:	fc 01       	movw	r30, r24
    1aea:	e2 0f       	add	r30, r18
    1aec:	f3 1f       	adc	r31, r19
    1aee:	83 e2       	ldi	r24, 0x23	; 35
    1af0:	80 83       	st	Z, r24

				/*Lastly, add the null terminator '\0'*/
				pass[pass_counter+1]='\0';
    1af2:	88 89       	ldd	r24, Y+16	; 0x10
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9c 01       	movw	r18, r24
    1afa:	2f 5f       	subi	r18, 0xFF	; 255
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	89 89       	ldd	r24, Y+17	; 0x11
    1b00:	9a 89       	ldd	r25, Y+18	; 0x12
    1b02:	fc 01       	movw	r30, r24
    1b04:	e2 0f       	add	r30, r18
    1b06:	f3 1f       	adc	r31, r19
    1b08:	10 82       	st	Z, r1
    1b0a:	89 c0       	rjmp	.+274    	; 0x1c1e <enterPass+0x1de>
				break;
			}
			else
			{
				/*If the user pressed any key other than enter, reduce the counter then continue, until the user hits enter*/
				pass_counter=4;
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
    1b10:	7f c0       	rjmp	.+254    	; 0x1c10 <enterPass+0x1d0>
			}
		}
		else
		{
			/*Save the entered characters in the password string*/
			pass[pass_counter]=pressed_key;
    1b12:	88 89       	ldd	r24, Y+16	; 0x10
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	89 89       	ldd	r24, Y+17	; 0x11
    1b1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e2 0f       	add	r30, r18
    1b20:	f3 1f       	adc	r31, r19
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	80 83       	st	Z, r24

			/*Display '*' on the LCD with each character taken from user */
			LCD_displayCharacter('*');
    1b26:	8a e2       	ldi	r24, 0x2A	; 42
    1b28:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_displayCharacter>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	aa ef       	ldi	r26, 0xFA	; 250
    1b32:	b3 e4       	ldi	r27, 0x43	; 67
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	53 e4       	ldi	r21, 0x43	; 67
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <enterPass+0x13e>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <enterPass+0x1bc>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <enterPass+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <enterPass+0x19e>
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <enterPass+0x18c>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <enterPass+0x180>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <enterPass+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <enterPass+0x1c8>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(1, 0);
		LCD_displayString("Same Pass:");
	}

	/*Loop to get and store the entered password using keypad*/
	for(pass_counter=0;pass_counter<PASSWORD_LIMIT;pass_counter++)
    1c10:	88 89       	ldd	r24, Y+16	; 0x10
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	88 8b       	std	Y+16, r24	; 0x10
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	86 30       	cpi	r24, 0x06	; 6
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <enterPass+0x1de>
    1c1c:	3d cf       	rjmp	.-390    	; 0x1a98 <enterPass+0x58>
		}

		/*Hardware delay*/
		_delay_ms(500);
	}
}
    1c1e:	63 96       	adiw	r28, 0x13	; 19
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <displayAndChooseOptions>:
/*
 * Description :
 * This function display the main options on the LCD, and takes input from the user then return that input.
 */
uint8 displayAndChooseOptions(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	63 97       	sbiw	r28, 0x13	; 19
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
	/*Variable to store ascii of pressed key, and boolean to control the while loop*/
	uint8 pressed_key,bool=TRUE;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	88 8b       	std	Y+16, r24	; 0x10

	/*To store the pressed key again, but this one is used in return statement*/
	uint8 choice;

	/*Display main options on LCD*/
	LCD_clearScreen();
    1c48:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1c4c:	83 ec       	ldi	r24, 0xC3	; 195
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
	LCD_moveCursor(1, 0);
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1c5c:	81 ed       	ldi	r24, 0xD1	; 209
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
    1c64:	8f c0       	rjmp	.+286    	; 0x1d84 <displayAndChooseOptions+0x154>

	while(bool)
	{
		/*Get the key*/
		pressed_key=KEYPAD_getPressedKey();
    1c66:	0e 94 c7 12 	call	0x258e	; 0x258e <KEYPAD_getPressedKey>
    1c6a:	89 8b       	std	Y+17, r24	; 0x11
		switch (pressed_key)
    1c6c:	89 89       	ldd	r24, Y+17	; 0x11
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3b 8b       	std	Y+19, r19	; 0x13
    1c74:	2a 8b       	std	Y+18, r18	; 0x12
    1c76:	8a 89       	ldd	r24, Y+18	; 0x12
    1c78:	9b 89       	ldd	r25, Y+19	; 0x13
    1c7a:	8b 32       	cpi	r24, 0x2B	; 43
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	31 f0       	breq	.+12     	; 0x1c8c <displayAndChooseOptions+0x5c>
    1c80:	2a 89       	ldd	r18, Y+18	; 0x12
    1c82:	3b 89       	ldd	r19, Y+19	; 0x13
    1c84:	2d 32       	cpi	r18, 0x2D	; 45
    1c86:	31 05       	cpc	r19, r1
    1c88:	29 f0       	breq	.+10     	; 0x1c94 <displayAndChooseOptions+0x64>
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <displayAndChooseOptions+0x6c>
		{
		case '+':
			/*get out of the loop only if user chooses '+' or '-'*/
			bool=FALSE;
    1c8c:	18 8a       	std	Y+16, r1	; 0x10
			choice= '+';
    1c8e:	8b e2       	ldi	r24, 0x2B	; 43
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <displayAndChooseOptions+0x70>
			break;
		case '-':
			bool=FALSE;
    1c94:	18 8a       	std	Y+16, r1	; 0x10
			choice='-';
    1c96:	8d e2       	ldi	r24, 0x2D	; 45
    1c98:	8f 87       	std	Y+15, r24	; 0x0f
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <displayAndChooseOptions+0x70>
			break;
		default:
			/*If any thing other than '+' and  '-' button is pressed, do nothing*/
			bool=TRUE;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	88 8b       	std	Y+16, r24	; 0x10
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a8 ec       	ldi	r26, 0xC8	; 200
    1ca6:	b2 e4       	ldi	r27, 0x42	; 66
    1ca8:	8b 87       	std	Y+11, r24	; 0x0b
    1caa:	9c 87       	std	Y+12, r25	; 0x0c
    1cac:	ad 87       	std	Y+13, r26	; 0x0d
    1cae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a e7       	ldi	r20, 0x7A	; 122
    1cbe:	53 e4       	ldi	r21, 0x43	; 67
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8f 83       	std	Y+7, r24	; 0x07
    1cca:	98 87       	std	Y+8, r25	; 0x08
    1ccc:	a9 87       	std	Y+9, r26	; 0x09
    1cce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <displayAndChooseOptions+0xc2>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <displayAndChooseOptions+0x140>
	else if (__tmp > 65535)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <displayAndChooseOptions+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <displayAndChooseOptions+0x122>
    1d34:	89 e1       	ldi	r24, 0x19	; 25
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <displayAndChooseOptions+0x110>
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <displayAndChooseOptions+0x104>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <displayAndChooseOptions+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <displayAndChooseOptions+0x14c>
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("+ : Open Door");
	LCD_moveCursor(1, 0);
	LCD_displayString("- : Change Pass");

	while(bool)
    1d84:	88 89       	ldd	r24, Y+16	; 0x10
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <displayAndChooseOptions+0x15c>
    1d8a:	6d cf       	rjmp	.-294    	; 0x1c66 <displayAndChooseOptions+0x36>
		/*Hardware delay*/
		_delay_ms(100);
	}

	/*Return ascii of the pressed key*/
	return choice;
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1d8e:	63 96       	adiw	r28, 0x13	; 19
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <callBack>:
 * Description :
 * This is the callBack Function that'll be called when an interrupt request is generated
 * by Timer1.
 */
void callBack(void)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <callBack+0x6>
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	static sint8 state_counter=1;

	/*Ask whether we want to use timer as delay to display error message, or use it to count time of motor opening and closing*/
	if(g_timer_delay_flag==TRUE)
    1daa:	80 91 27 02 	lds	r24, 0x0227
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <callBack+0x1c>
	{
		/*If the delay is done, reset everything*/
		g_timer_delay_flag=FALSE;
    1db2:	10 92 27 02 	sts	0x0227, r1
		Timer1_deInit();
    1db6:	0e 94 bd 19 	call	0x337a	; 0x337a <Timer1_deInit>
    1dba:	a6 c0       	rjmp	.+332    	; 0x1f08 <callBack+0x168>
	}
	else
	{
		switch (state_counter)
    1dbc:	80 91 1e 02 	lds	r24, 0x021E
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	33 27       	eor	r19, r19
    1dc4:	27 fd       	sbrc	r18, 7
    1dc6:	30 95       	com	r19
    1dc8:	3a 83       	std	Y+2, r19	; 0x02
    1dca:	29 83       	std	Y+1, r18	; 0x01
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <callBack+0x38>
    1dd6:	42 c0       	rjmp	.+132    	; 0x1e5c <callBack+0xbc>
    1dd8:	29 81       	ldd	r18, Y+1	; 0x01
    1dda:	3a 81       	ldd	r19, Y+2	; 0x02
    1ddc:	23 30       	cpi	r18, 0x03	; 3
    1dde:	31 05       	cpc	r19, r1
    1de0:	34 f4       	brge	.+12     	; 0x1dee <callBack+0x4e>
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	71 f0       	breq	.+28     	; 0x1e08 <callBack+0x68>
    1dec:	8d c0       	rjmp	.+282    	; 0x1f08 <callBack+0x168>
    1dee:	29 81       	ldd	r18, Y+1	; 0x01
    1df0:	3a 81       	ldd	r19, Y+2	; 0x02
    1df2:	23 30       	cpi	r18, 0x03	; 3
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <callBack+0x5a>
    1df8:	4b c0       	rjmp	.+150    	; 0x1e90 <callBack+0xf0>
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	84 30       	cpi	r24, 0x04	; 4
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <callBack+0x66>
    1e04:	69 c0       	rjmp	.+210    	; 0x1ed8 <callBack+0x138>
    1e06:	80 c0       	rjmp	.+256    	; 0x1f08 <callBack+0x168>
		{
		case 1:
			/*Configure timer to count 15 seconds, during which "Door is unlocking" is displayed on LCD*/
			state_counter++;
    1e08:	80 91 1e 02 	lds	r24, 0x021E
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	80 93 1e 02 	sts	0x021E, r24
			LCD_clearScreen();
    1e12:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 5, "Door is ");
    1e16:	21 ee       	ldi	r18, 0xE1	; 225
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	65 e0       	ldi	r22, 0x05	; 5
    1e1e:	a9 01       	movw	r20, r18
    1e20:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 5, "Unlocking");
    1e24:	2a ee       	ldi	r18, 0xEA	; 234
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	65 e0       	ldi	r22, 0x05	; 5
    1e2c:	a9 01       	movw	r20, r18
    1e2e:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>
			Timer1_Config_Struct.mode=TIMER1_COMPARE_MODE;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 17 02 	sts	0x0217, r24
			Timer1_Config_Struct.prescaler=F_CPU_1024;
    1e38:	85 e0       	ldi	r24, 0x05	; 5
    1e3a:	80 93 16 02 	sts	0x0216, r24
			Timer1_Config_Struct.compare_value=14649;
    1e3e:	89 e3       	ldi	r24, 0x39	; 57
    1e40:	99 e3       	ldi	r25, 0x39	; 57
    1e42:	90 93 15 02 	sts	0x0215, r25
    1e46:	80 93 14 02 	sts	0x0214, r24
			Timer1_Config_Struct.initial_value=0;
    1e4a:	10 92 13 02 	sts	0x0213, r1
    1e4e:	10 92 12 02 	sts	0x0212, r1
			Timer1_init(&Timer1_Config_Struct);
    1e52:	82 e1       	ldi	r24, 0x12	; 18
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>
    1e5a:	56 c0       	rjmp	.+172    	; 0x1f08 <callBack+0x168>
			break;
		case 2:
			/*Configure timer to count 3 seconds, during which "Door is unlocked" is displayed on LCD*/
			state_counter++;
    1e5c:	80 91 1e 02 	lds	r24, 0x021E
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	80 93 1e 02 	sts	0x021E, r24
			LCD_clearScreen();
    1e66:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
			LCD_displayString("Door Unlocked");
    1e6a:	84 ef       	ldi	r24, 0xF4	; 244
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
			Timer1_Config_Struct.compare_value=2930;
    1e72:	82 e7       	ldi	r24, 0x72	; 114
    1e74:	9b e0       	ldi	r25, 0x0B	; 11
    1e76:	90 93 15 02 	sts	0x0215, r25
    1e7a:	80 93 14 02 	sts	0x0214, r24
			Timer1_Config_Struct.initial_value=0;
    1e7e:	10 92 13 02 	sts	0x0213, r1
    1e82:	10 92 12 02 	sts	0x0212, r1
			Timer1_init(&Timer1_Config_Struct);
    1e86:	82 e1       	ldi	r24, 0x12	; 18
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>
    1e8e:	3c c0       	rjmp	.+120    	; 0x1f08 <callBack+0x168>
			break;
		case 3:
			/*Configure timer to count 15 seconds, during which "Door is locking" is displayed on LCD*/
			state_counter++;
    1e90:	80 91 1e 02 	lds	r24, 0x021E
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	80 93 1e 02 	sts	0x021E, r24
			LCD_clearScreen();
    1e9a:	0e 94 cc 18 	call	0x3198	; 0x3198 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 5, "Door is ");
    1e9e:	21 ee       	ldi	r18, 0xE1	; 225
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	65 e0       	ldi	r22, 0x05	; 5
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 5, "Locking");
    1eac:	22 e0       	ldi	r18, 0x02	; 2
    1eae:	31 e0       	ldi	r19, 0x01	; 1
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	65 e0       	ldi	r22, 0x05	; 5
    1eb4:	a9 01       	movw	r20, r18
    1eb6:	0e 94 b3 18 	call	0x3166	; 0x3166 <LCD_displayStringRowColumn>
			Timer1_Config_Struct.compare_value=14649;
    1eba:	89 e3       	ldi	r24, 0x39	; 57
    1ebc:	99 e3       	ldi	r25, 0x39	; 57
    1ebe:	90 93 15 02 	sts	0x0215, r25
    1ec2:	80 93 14 02 	sts	0x0214, r24
			Timer1_Config_Struct.initial_value=0;
    1ec6:	10 92 13 02 	sts	0x0213, r1
    1eca:	10 92 12 02 	sts	0x0212, r1
			Timer1_init(&Timer1_Config_Struct);
    1ece:	82 e1       	ldi	r24, 0x12	; 18
    1ed0:	92 e0       	ldi	r25, 0x02	; 2
    1ed2:	0e 94 61 19 	call	0x32c2	; 0x32c2 <Timer1_init>
    1ed6:	18 c0       	rjmp	.+48     	; 0x1f08 <callBack+0x168>
			break;
		case 4:
			/*Reset everything and deinit the timer*/
			state_counter=1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	80 93 1e 02 	sts	0x021E, r24

			/*Dummy configurations to start the timer with in the next time*/
			Timer1_Config_Struct.compare_value=1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	90 93 15 02 	sts	0x0215, r25
    1ee6:	80 93 14 02 	sts	0x0214, r24
			Timer1_Config_Struct.initial_value=0;
    1eea:	10 92 13 02 	sts	0x0213, r1
    1eee:	10 92 12 02 	sts	0x0212, r1
			Timer1_Config_Struct.mode=TIMER1_COMPARE_MODE;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 17 02 	sts	0x0217, r24
			Timer1_Config_Struct.prescaler=NO_PRESCALER;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	80 93 16 02 	sts	0x0216, r24

			/*Signal that timer has finished to get out of the infinite loop*/
			g_timer_is_finished=TRUE;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 93 26 02 	sts	0x0226, r24
			Timer1_deInit();
    1f04:	0e 94 bd 19 	call	0x337a	; 0x337a <Timer1_deInit>
			break;
		}
	}
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <GPIO_setupPinDirection+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <GPIO_setupPinDirection+0x8>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	6a 83       	std	Y+2, r22	; 0x02
    1f24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <GPIO_setupPinDirection+0x1c>
    1f2c:	d5 c0       	rjmp	.+426    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <GPIO_setupPinDirection+0x24>
    1f34:	d1 c0       	rjmp	.+418    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	3d 83       	std	Y+5, r19	; 0x05
    1f3e:	2c 83       	std	Y+4, r18	; 0x04
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <GPIO_setupPinDirection+0x3a>
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <GPIO_setupPinDirection+0xc0>
    1f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <GPIO_setupPinDirection+0x4e>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	71 f0       	breq	.+28     	; 0x1f7a <GPIO_setupPinDirection+0x68>
    1f5e:	bc c0       	rjmp	.+376    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
    1f60:	2c 81       	ldd	r18, Y+4	; 0x04
    1f62:	3d 81       	ldd	r19, Y+5	; 0x05
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <GPIO_setupPinDirection+0x5a>
    1f6a:	5f c0       	rjmp	.+190    	; 0x202a <GPIO_setupPinDirection+0x118>
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	91 05       	cpc	r25, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <GPIO_setupPinDirection+0x66>
    1f76:	85 c0       	rjmp	.+266    	; 0x2082 <GPIO_setupPinDirection+0x170>
    1f78:	af c0       	rjmp	.+350    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	a1 f4       	brne	.+40     	; 0x1fa8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f80:	aa e3       	ldi	r26, 0x3A	; 58
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ea e3       	ldi	r30, 0x3A	; 58
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <GPIO_setupPinDirection+0x8c>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <GPIO_setupPinDirection+0x88>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	98 c0       	rjmp	.+304    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1fa8:	aa e3       	ldi	r26, 0x3A	; 58
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ea e3       	ldi	r30, 0x3A	; 58
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <GPIO_setupPinDirection+0xb4>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <GPIO_setupPinDirection+0xb0>
    1fca:	80 95       	com	r24
    1fcc:	84 23       	and	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	83 c0       	rjmp	.+262    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	a1 f4       	brne	.+40     	; 0x2000 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1fd8:	a7 e3       	ldi	r26, 0x37	; 55
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e7 e3       	ldi	r30, 0x37	; 55
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <GPIO_setupPinDirection+0xe4>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <GPIO_setupPinDirection+0xe0>
    1ffa:	84 2b       	or	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	6c c0       	rjmp	.+216    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2000:	a7 e3       	ldi	r26, 0x37	; 55
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e7 e3       	ldi	r30, 0x37	; 55
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <GPIO_setupPinDirection+0x10c>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <GPIO_setupPinDirection+0x108>
    2022:	80 95       	com	r24
    2024:	84 23       	and	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	57 c0       	rjmp	.+174    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	a1 f4       	brne	.+40     	; 0x2058 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2030:	a4 e3       	ldi	r26, 0x34	; 52
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e4 e3       	ldi	r30, 0x34	; 52
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 2e       	mov	r0, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_setupPinDirection+0x13c>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_setupPinDirection+0x138>
    2052:	84 2b       	or	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	40 c0       	rjmp	.+128    	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2058:	a4 e3       	ldi	r26, 0x34	; 52
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e4 e3       	ldi	r30, 0x34	; 52
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <GPIO_setupPinDirection+0x164>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <GPIO_setupPinDirection+0x160>
    207a:	80 95       	com	r24
    207c:	84 23       	and	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	2b c0       	rjmp	.+86     	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	a1 f4       	brne	.+40     	; 0x20b0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2088:	a1 e3       	ldi	r26, 0x31	; 49
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e1 e3       	ldi	r30, 0x31	; 49
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 2e       	mov	r0, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <GPIO_setupPinDirection+0x194>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <GPIO_setupPinDirection+0x190>
    20aa:	84 2b       	or	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    20b0:	a1 e3       	ldi	r26, 0x31	; 49
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e1 e3       	ldi	r30, 0x31	; 49
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 2e       	mov	r0, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <GPIO_setupPinDirection+0x1bc>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <GPIO_setupPinDirection+0x1b8>
    20d2:	80 95       	com	r24
    20d4:	84 23       	and	r24, r20
    20d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <GPIO_writePin+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <GPIO_writePin+0x8>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	6a 83       	std	Y+2, r22	; 0x02
    20fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	08 f0       	brcs	.+2      	; 0x2104 <GPIO_writePin+0x1c>
    2102:	d5 c0       	rjmp	.+426    	; 0x22ae <GPIO_writePin+0x1c6>
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	08 f0       	brcs	.+2      	; 0x210c <GPIO_writePin+0x24>
    210a:	d1 c0       	rjmp	.+418    	; 0x22ae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	3d 83       	std	Y+5, r19	; 0x05
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	91 05       	cpc	r25, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <GPIO_writePin+0x3a>
    2120:	43 c0       	rjmp	.+134    	; 0x21a8 <GPIO_writePin+0xc0>
    2122:	2c 81       	ldd	r18, Y+4	; 0x04
    2124:	3d 81       	ldd	r19, Y+5	; 0x05
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	2c f4       	brge	.+10     	; 0x2136 <GPIO_writePin+0x4e>
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	71 f0       	breq	.+28     	; 0x2150 <GPIO_writePin+0x68>
    2134:	bc c0       	rjmp	.+376    	; 0x22ae <GPIO_writePin+0x1c6>
    2136:	2c 81       	ldd	r18, Y+4	; 0x04
    2138:	3d 81       	ldd	r19, Y+5	; 0x05
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	31 05       	cpc	r19, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <GPIO_writePin+0x5a>
    2140:	5f c0       	rjmp	.+190    	; 0x2200 <GPIO_writePin+0x118>
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	83 30       	cpi	r24, 0x03	; 3
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <GPIO_writePin+0x66>
    214c:	85 c0       	rjmp	.+266    	; 0x2258 <GPIO_writePin+0x170>
    214e:	af c0       	rjmp	.+350    	; 0x22ae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	81 30       	cpi	r24, 0x01	; 1
    2154:	a1 f4       	brne	.+40     	; 0x217e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2156:	ab e3       	ldi	r26, 0x3B	; 59
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	eb e3       	ldi	r30, 0x3B	; 59
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <GPIO_writePin+0x8c>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <GPIO_writePin+0x88>
    2178:	84 2b       	or	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	98 c0       	rjmp	.+304    	; 0x22ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    217e:	ab e3       	ldi	r26, 0x3B	; 59
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	eb e3       	ldi	r30, 0x3B	; 59
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	48 2f       	mov	r20, r24
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <GPIO_writePin+0xb4>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <GPIO_writePin+0xb0>
    21a0:	80 95       	com	r24
    21a2:	84 23       	and	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	83 c0       	rjmp	.+262    	; 0x22ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	a1 f4       	brne	.+40     	; 0x21d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    21ae:	a8 e3       	ldi	r26, 0x38	; 56
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e8 e3       	ldi	r30, 0x38	; 56
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <GPIO_writePin+0xe4>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <GPIO_writePin+0xe0>
    21d0:	84 2b       	or	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	6c c0       	rjmp	.+216    	; 0x22ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    21d6:	a8 e3       	ldi	r26, 0x38	; 56
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e8 e3       	ldi	r30, 0x38	; 56
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <GPIO_writePin+0x10c>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <GPIO_writePin+0x108>
    21f8:	80 95       	com	r24
    21fa:	84 23       	and	r24, r20
    21fc:	8c 93       	st	X, r24
    21fe:	57 c0       	rjmp	.+174    	; 0x22ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	a1 f4       	brne	.+40     	; 0x222e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2206:	a5 e3       	ldi	r26, 0x35	; 53
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e3       	ldi	r30, 0x35	; 53
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	48 2f       	mov	r20, r24
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	02 2e       	mov	r0, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_writePin+0x13c>
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	0a 94       	dec	r0
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_writePin+0x138>
    2228:	84 2b       	or	r24, r20
    222a:	8c 93       	st	X, r24
    222c:	40 c0       	rjmp	.+128    	; 0x22ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    222e:	a5 e3       	ldi	r26, 0x35	; 53
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e5 e3       	ldi	r30, 0x35	; 53
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	48 2f       	mov	r20, r24
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	02 2e       	mov	r0, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <GPIO_writePin+0x164>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <GPIO_writePin+0x160>
    2250:	80 95       	com	r24
    2252:	84 23       	and	r24, r20
    2254:	8c 93       	st	X, r24
    2256:	2b c0       	rjmp	.+86     	; 0x22ae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	a1 f4       	brne	.+40     	; 0x2286 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    225e:	a2 e3       	ldi	r26, 0x32	; 50
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e2 e3       	ldi	r30, 0x32	; 50
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	48 2f       	mov	r20, r24
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 2e       	mov	r0, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <GPIO_writePin+0x194>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	0a 94       	dec	r0
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <GPIO_writePin+0x190>
    2280:	84 2b       	or	r24, r20
    2282:	8c 93       	st	X, r24
    2284:	14 c0       	rjmp	.+40     	; 0x22ae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2286:	a2 e3       	ldi	r26, 0x32	; 50
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e2 e3       	ldi	r30, 0x32	; 50
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	48 2f       	mov	r20, r24
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 2e       	mov	r0, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <GPIO_writePin+0x1bc>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	0a 94       	dec	r0
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <GPIO_writePin+0x1b8>
    22a8:	80 95       	com	r24
    22aa:	84 23       	and	r24, r20
    22ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <GPIO_readPin+0x6>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <GPIO_readPin+0x8>
    22c6:	0f 92       	push	r0
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	8a 83       	std	Y+2, r24	; 0x02
    22ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    22d0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	88 30       	cpi	r24, 0x08	; 8
    22d6:	08 f0       	brcs	.+2      	; 0x22da <GPIO_readPin+0x1c>
    22d8:	84 c0       	rjmp	.+264    	; 0x23e2 <GPIO_readPin+0x124>
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	08 f0       	brcs	.+2      	; 0x22e2 <GPIO_readPin+0x24>
    22e0:	80 c0       	rjmp	.+256    	; 0x23e2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	3d 83       	std	Y+5, r19	; 0x05
    22ea:	2c 83       	std	Y+4, r18	; 0x04
    22ec:	4c 81       	ldd	r20, Y+4	; 0x04
    22ee:	5d 81       	ldd	r21, Y+5	; 0x05
    22f0:	41 30       	cpi	r20, 0x01	; 1
    22f2:	51 05       	cpc	r21, r1
    22f4:	79 f1       	breq	.+94     	; 0x2354 <GPIO_readPin+0x96>
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	9d 81       	ldd	r25, Y+5	; 0x05
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	91 05       	cpc	r25, r1
    22fe:	34 f4       	brge	.+12     	; 0x230c <GPIO_readPin+0x4e>
    2300:	2c 81       	ldd	r18, Y+4	; 0x04
    2302:	3d 81       	ldd	r19, Y+5	; 0x05
    2304:	21 15       	cp	r18, r1
    2306:	31 05       	cpc	r19, r1
    2308:	69 f0       	breq	.+26     	; 0x2324 <GPIO_readPin+0x66>
    230a:	6b c0       	rjmp	.+214    	; 0x23e2 <GPIO_readPin+0x124>
    230c:	4c 81       	ldd	r20, Y+4	; 0x04
    230e:	5d 81       	ldd	r21, Y+5	; 0x05
    2310:	42 30       	cpi	r20, 0x02	; 2
    2312:	51 05       	cpc	r21, r1
    2314:	b9 f1       	breq	.+110    	; 0x2384 <GPIO_readPin+0xc6>
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	83 30       	cpi	r24, 0x03	; 3
    231c:	91 05       	cpc	r25, r1
    231e:	09 f4       	brne	.+2      	; 0x2322 <GPIO_readPin+0x64>
    2320:	49 c0       	rjmp	.+146    	; 0x23b4 <GPIO_readPin+0xf6>
    2322:	5f c0       	rjmp	.+190    	; 0x23e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2324:	e9 e3       	ldi	r30, 0x39	; 57
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a9 01       	movw	r20, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <GPIO_readPin+0x7e>
    2338:	55 95       	asr	r21
    233a:	47 95       	ror	r20
    233c:	8a 95       	dec	r24
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <GPIO_readPin+0x7a>
    2340:	ca 01       	movw	r24, r20
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	49 c0       	rjmp	.+146    	; 0x23e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	47 c0       	rjmp	.+142    	; 0x23e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2354:	e6 e3       	ldi	r30, 0x36	; 54
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a9 01       	movw	r20, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <GPIO_readPin+0xae>
    2368:	55 95       	asr	r21
    236a:	47 95       	ror	r20
    236c:	8a 95       	dec	r24
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <GPIO_readPin+0xaa>
    2370:	ca 01       	movw	r24, r20
    2372:	81 70       	andi	r24, 0x01	; 1
    2374:	90 70       	andi	r25, 0x00	; 0
    2376:	88 23       	and	r24, r24
    2378:	19 f0       	breq	.+6      	; 0x2380 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	31 c0       	rjmp	.+98     	; 0x23e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2380:	19 82       	std	Y+1, r1	; 0x01
    2382:	2f c0       	rjmp	.+94     	; 0x23e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2384:	e3 e3       	ldi	r30, 0x33	; 51
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a9 01       	movw	r20, r18
    2396:	02 c0       	rjmp	.+4      	; 0x239c <GPIO_readPin+0xde>
    2398:	55 95       	asr	r21
    239a:	47 95       	ror	r20
    239c:	8a 95       	dec	r24
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <GPIO_readPin+0xda>
    23a0:	ca 01       	movw	r24, r20
    23a2:	81 70       	andi	r24, 0x01	; 1
    23a4:	90 70       	andi	r25, 0x00	; 0
    23a6:	88 23       	and	r24, r24
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	19 c0       	rjmp	.+50     	; 0x23e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23b0:	19 82       	std	Y+1, r1	; 0x01
    23b2:	17 c0       	rjmp	.+46     	; 0x23e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    23b4:	e0 e3       	ldi	r30, 0x30	; 48
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a9 01       	movw	r20, r18
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <GPIO_readPin+0x10e>
    23c8:	55 95       	asr	r21
    23ca:	47 95       	ror	r20
    23cc:	8a 95       	dec	r24
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <GPIO_readPin+0x10a>
    23d0:	ca 01       	movw	r24, r20
    23d2:	81 70       	andi	r24, 0x01	; 1
    23d4:	90 70       	andi	r25, 0x00	; 0
    23d6:	88 23       	and	r24, r24
    23d8:	19 f0       	breq	.+6      	; 0x23e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <GPIO_setupPortDirection+0x6>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <GPIO_setupPortDirection+0x8>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	84 30       	cpi	r24, 0x04	; 4
    2408:	90 f5       	brcc	.+100    	; 0x246e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3c 83       	std	Y+4, r19	; 0x04
    2412:	2b 83       	std	Y+3, r18	; 0x03
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	d1 f0       	breq	.+52     	; 0x2452 <GPIO_setupPortDirection+0x5e>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	2c f4       	brge	.+10     	; 0x2432 <GPIO_setupPortDirection+0x3e>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	61 f0       	breq	.+24     	; 0x2448 <GPIO_setupPortDirection+0x54>
    2430:	1e c0       	rjmp	.+60     	; 0x246e <GPIO_setupPortDirection+0x7a>
    2432:	2b 81       	ldd	r18, Y+3	; 0x03
    2434:	3c 81       	ldd	r19, Y+4	; 0x04
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	81 f0       	breq	.+32     	; 0x245c <GPIO_setupPortDirection+0x68>
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	91 05       	cpc	r25, r1
    2444:	81 f0       	breq	.+32     	; 0x2466 <GPIO_setupPortDirection+0x72>
    2446:	13 c0       	rjmp	.+38     	; 0x246e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2448:	ea e3       	ldi	r30, 0x3A	; 58
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	80 83       	st	Z, r24
    2450:	0e c0       	rjmp	.+28     	; 0x246e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2452:	e7 e3       	ldi	r30, 0x37	; 55
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	80 83       	st	Z, r24
    245a:	09 c0       	rjmp	.+18     	; 0x246e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    245c:	e4 e3       	ldi	r30, 0x34	; 52
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	80 83       	st	Z, r24
    2464:	04 c0       	rjmp	.+8      	; 0x246e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2466:	e1 e3       	ldi	r30, 0x31	; 49
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	80 83       	st	Z, r24
			break;
		}
	}
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <GPIO_writePort+0x6>
    2482:	00 d0       	rcall	.+0      	; 0x2484 <GPIO_writePort+0x8>
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	84 30       	cpi	r24, 0x04	; 4
    2490:	90 f5       	brcc	.+100    	; 0x24f6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	3c 83       	std	Y+4, r19	; 0x04
    249a:	2b 83       	std	Y+3, r18	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	d1 f0       	breq	.+52     	; 0x24da <GPIO_writePort+0x5e>
    24a6:	2b 81       	ldd	r18, Y+3	; 0x03
    24a8:	3c 81       	ldd	r19, Y+4	; 0x04
    24aa:	22 30       	cpi	r18, 0x02	; 2
    24ac:	31 05       	cpc	r19, r1
    24ae:	2c f4       	brge	.+10     	; 0x24ba <GPIO_writePort+0x3e>
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <GPIO_writePort+0x54>
    24b8:	1e c0       	rjmp	.+60     	; 0x24f6 <GPIO_writePort+0x7a>
    24ba:	2b 81       	ldd	r18, Y+3	; 0x03
    24bc:	3c 81       	ldd	r19, Y+4	; 0x04
    24be:	22 30       	cpi	r18, 0x02	; 2
    24c0:	31 05       	cpc	r19, r1
    24c2:	81 f0       	breq	.+32     	; 0x24e4 <GPIO_writePort+0x68>
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	91 05       	cpc	r25, r1
    24cc:	81 f0       	breq	.+32     	; 0x24ee <GPIO_writePort+0x72>
    24ce:	13 c0       	rjmp	.+38     	; 0x24f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    24d0:	eb e3       	ldi	r30, 0x3B	; 59
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	80 83       	st	Z, r24
    24d8:	0e c0       	rjmp	.+28     	; 0x24f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    24da:	e8 e3       	ldi	r30, 0x38	; 56
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	80 83       	st	Z, r24
    24e2:	09 c0       	rjmp	.+18     	; 0x24f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    24e4:	e5 e3       	ldi	r30, 0x35	; 53
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	80 83       	st	Z, r24
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    24ee:	e2 e3       	ldi	r30, 0x32	; 50
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	00 d0       	rcall	.+0      	; 0x250a <GPIO_readPort+0x6>
    250a:	00 d0       	rcall	.+0      	; 0x250c <GPIO_readPort+0x8>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2512:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	90 f5       	brcc	.+100    	; 0x257e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	3c 83       	std	Y+4, r19	; 0x04
    2522:	2b 83       	std	Y+3, r18	; 0x03
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	81 30       	cpi	r24, 0x01	; 1
    252a:	91 05       	cpc	r25, r1
    252c:	d1 f0       	breq	.+52     	; 0x2562 <GPIO_readPort+0x5e>
    252e:	2b 81       	ldd	r18, Y+3	; 0x03
    2530:	3c 81       	ldd	r19, Y+4	; 0x04
    2532:	22 30       	cpi	r18, 0x02	; 2
    2534:	31 05       	cpc	r19, r1
    2536:	2c f4       	brge	.+10     	; 0x2542 <GPIO_readPort+0x3e>
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	61 f0       	breq	.+24     	; 0x2558 <GPIO_readPort+0x54>
    2540:	1e c0       	rjmp	.+60     	; 0x257e <GPIO_readPort+0x7a>
    2542:	2b 81       	ldd	r18, Y+3	; 0x03
    2544:	3c 81       	ldd	r19, Y+4	; 0x04
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	81 f0       	breq	.+32     	; 0x256c <GPIO_readPort+0x68>
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	83 30       	cpi	r24, 0x03	; 3
    2552:	91 05       	cpc	r25, r1
    2554:	81 f0       	breq	.+32     	; 0x2576 <GPIO_readPort+0x72>
    2556:	13 c0       	rjmp	.+38     	; 0x257e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2558:	e9 e3       	ldi	r30, 0x39	; 57
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	0e c0       	rjmp	.+28     	; 0x257e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2562:	e6 e3       	ldi	r30, 0x36	; 54
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	09 c0       	rjmp	.+18     	; 0x257e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    256c:	e3 e3       	ldi	r30, 0x33	; 51
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	04 c0       	rjmp	.+8      	; 0x257e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2576:	e0 e3       	ldi	r30, 0x30	; 48
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <KEYPAD_getPressedKey+0x6>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	/*set all rows  as input pins*/
	uint8 rows_counter=0,cols_counter=0;
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	19 82       	std	Y+1, r1	; 0x01

	/*Each time setup the direction for all keypad port as input pins*/
	for(rows_counter=0;rows_counter<KEYPAD_NUM_ROWS;rows_counter++)
    259c:	1a 82       	std	Y+2, r1	; 0x02
    259e:	08 c0       	rjmp	.+16     	; 0x25b0 <KEYPAD_getPressedKey+0x22>
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, PIN_INPUT);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	6a 81       	ldd	r22, Y+2	; 0x02
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>
{
	/*set all rows  as input pins*/
	uint8 rows_counter=0,cols_counter=0;

	/*Each time setup the direction for all keypad port as input pins*/
	for(rows_counter=0;rows_counter<KEYPAD_NUM_ROWS;rows_counter++)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	8a 83       	std	Y+2, r24	; 0x02
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	84 30       	cpi	r24, 0x04	; 4
    25b4:	a8 f3       	brcs	.-22     	; 0x25a0 <KEYPAD_getPressedKey+0x12>
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, PIN_INPUT);
	}

	/*set all columns as input pins in either (4x3, or 4x4) mode*/
	for(cols_counter=0;cols_counter<KEYPAD_NUM_COLS;cols_counter++)
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <KEYPAD_getPressedKey+0x42>
	{
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+cols_counter, PIN_INPUT);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	98 2f       	mov	r25, r24
    25be:	9c 5f       	subi	r25, 0xFC	; 252
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	69 2f       	mov	r22, r25
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, PIN_INPUT);
	}

	/*set all columns as input pins in either (4x3, or 4x4) mode*/
	for(cols_counter=0;cols_counter<KEYPAD_NUM_COLS;cols_counter++)
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	84 30       	cpi	r24, 0x04	; 4
    25d4:	90 f3       	brcs	.-28     	; 0x25ba <KEYPAD_getPressedKey+0x2c>

	/*check pressed key logic*/
	while(1)
	{
		/* loop for rows */
		for(rows_counter=0;rows_counter<KEYPAD_NUM_ROWS;rows_counter++)
    25d6:	1a 82       	std	Y+2, r1	; 0x02
    25d8:	35 c0       	rjmp	.+106    	; 0x2644 <KEYPAD_getPressedKey+0xb6>
		{
			/*Setup the current row pin as output*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, PIN_OUTPUT);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	6a 81       	ldd	r22, Y+2	; 0x02
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, KEYPAD_BUTTON_PRESSED);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	6a 81       	ldd	r22, Y+2	; 0x02
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>

			/* loop for columns */
			for(cols_counter=0;cols_counter<KEYPAD_NUM_COLS;cols_counter++)
    25ee:	19 82       	std	Y+1, r1	; 0x01
    25f0:	1e c0       	rjmp	.+60     	; 0x262e <KEYPAD_getPressedKey+0xa0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+cols_counter)==KEYPAD_BUTTON_PRESSED)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	98 2f       	mov	r25, r24
    25f6:	9c 5f       	subi	r25, 0xFC	; 252
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	69 2f       	mov	r22, r25
    25fc:	0e 94 5f 11 	call	0x22be	; 0x22be <GPIO_readPin>
    2600:	88 23       	and	r24, r24
    2602:	91 f4       	brne	.+36     	; 0x2628 <KEYPAD_getPressedKey+0x9a>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return (rows_counter*KEYPAD_NUM_COLS+cols_counter+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber(rows_counter*KEYPAD_NUM_COLS+cols_counter+1);
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	98 2f       	mov	r25, r24
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	89 0f       	add	r24, r25
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	0e 94 26 13 	call	0x264c	; 0x264c <KEYPAD_4x4_adjustKeyNumber>
			}
			/*return the row pin to be input again*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+rows_counter,PIN_INPUT);
		}
	}
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret
			/*Setup the current row pin as output*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+rows_counter, KEYPAD_BUTTON_PRESSED);

			/* loop for columns */
			for(cols_counter=0;cols_counter<KEYPAD_NUM_COLS;cols_counter++)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	84 30       	cpi	r24, 0x04	; 4
    2632:	f8 f2       	brcs	.-66     	; 0x25f2 <KEYPAD_getPressedKey+0x64>
						#endif
					#endif
				}
			}
			/*return the row pin to be input again*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+rows_counter,PIN_INPUT);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	6a 81       	ldd	r22, Y+2	; 0x02
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>

	/*check pressed key logic*/
	while(1)
	{
		/* loop for rows */
		for(rows_counter=0;rows_counter<KEYPAD_NUM_ROWS;rows_counter++)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	84 30       	cpi	r24, 0x04	; 4
    2648:	40 f2       	brcs	.-112    	; 0x25da <KEYPAD_getPressedKey+0x4c>
    264a:	c5 cf       	rjmp	.-118    	; 0x25d6 <KEYPAD_getPressedKey+0x48>

0000264c <KEYPAD_4x4_adjustKeyNumber>:
	return keypad_button;
}

#elif (KEYPAD_NUM_COLS==4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    265a:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3c 83       	std	Y+4, r19	; 0x04
    2664:	2b 83       	std	Y+3, r18	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	91 05       	cpc	r25, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2670:	70 c0       	rjmp	.+224    	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2672:	2b 81       	ldd	r18, Y+3	; 0x03
    2674:	3c 81       	ldd	r19, Y+4	; 0x04
    2676:	29 30       	cpi	r18, 0x09	; 9
    2678:	31 05       	cpc	r19, r1
    267a:	5c f5       	brge	.+86     	; 0x26d2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	84 30       	cpi	r24, 0x04	; 4
    2682:	91 05       	cpc	r25, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2686:	59 c0       	rjmp	.+178    	; 0x273a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2688:	2b 81       	ldd	r18, Y+3	; 0x03
    268a:	3c 81       	ldd	r19, Y+4	; 0x04
    268c:	25 30       	cpi	r18, 0x05	; 5
    268e:	31 05       	cpc	r19, r1
    2690:	9c f4       	brge	.+38     	; 0x26b8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	91 05       	cpc	r25, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <KEYPAD_4x4_adjustKeyNumber+0x52>
    269c:	48 c0       	rjmp	.+144    	; 0x272e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	23 30       	cpi	r18, 0x03	; 3
    26a4:	31 05       	cpc	r19, r1
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    26a8:	45 c0       	rjmp	.+138    	; 0x2734 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    26b4:	39 c0       	rjmp	.+114    	; 0x2728 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    26b6:	67 c0       	rjmp	.+206    	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	26 30       	cpi	r18, 0x06	; 6
    26be:	31 05       	cpc	r19, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    26c2:	41 c0       	rjmp	.+130    	; 0x2746 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	87 30       	cpi	r24, 0x07	; 7
    26ca:	91 05       	cpc	r25, r1
    26cc:	0c f0       	brlt	.+2      	; 0x26d0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    26ce:	3e c0       	rjmp	.+124    	; 0x274c <KEYPAD_4x4_adjustKeyNumber+0x100>
    26d0:	37 c0       	rjmp	.+110    	; 0x2740 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    26d2:	2b 81       	ldd	r18, Y+3	; 0x03
    26d4:	3c 81       	ldd	r19, Y+4	; 0x04
    26d6:	2c 30       	cpi	r18, 0x0C	; 12
    26d8:	31 05       	cpc	r19, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <KEYPAD_4x4_adjustKeyNumber+0x92>
    26dc:	46 c0       	rjmp	.+140    	; 0x276a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	8d 30       	cpi	r24, 0x0D	; 13
    26e4:	91 05       	cpc	r25, r1
    26e6:	5c f4       	brge	.+22     	; 0x26fe <KEYPAD_4x4_adjustKeyNumber+0xb2>
    26e8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ea:	3c 81       	ldd	r19, Y+4	; 0x04
    26ec:	2a 30       	cpi	r18, 0x0A	; 10
    26ee:	31 05       	cpc	r19, r1
    26f0:	b1 f1       	breq	.+108    	; 0x275e <KEYPAD_4x4_adjustKeyNumber+0x112>
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	8b 30       	cpi	r24, 0x0B	; 11
    26f8:	91 05       	cpc	r25, r1
    26fa:	a4 f5       	brge	.+104    	; 0x2764 <KEYPAD_4x4_adjustKeyNumber+0x118>
    26fc:	2d c0       	rjmp	.+90     	; 0x2758 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	2e 30       	cpi	r18, 0x0E	; 14
    2704:	31 05       	cpc	r19, r1
    2706:	b9 f1       	breq	.+110    	; 0x2776 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	8e 30       	cpi	r24, 0x0E	; 14
    270e:	91 05       	cpc	r25, r1
    2710:	7c f1       	brlt	.+94     	; 0x2770 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	2f 30       	cpi	r18, 0x0F	; 15
    2718:	31 05       	cpc	r19, r1
    271a:	79 f1       	breq	.+94     	; 0x277a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	80 31       	cpi	r24, 0x10	; 16
    2722:	91 05       	cpc	r25, r1
    2724:	69 f1       	breq	.+90     	; 0x2780 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2726:	2f c0       	rjmp	.+94     	; 0x2786 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button=7;
    2728:	87 e0       	ldi	r24, 0x07	; 7
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	2e c0       	rjmp	.+92     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button=8;
    272e:	88 e0       	ldi	r24, 0x08	; 8
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	2b c0       	rjmp	.+86     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button=9;
    2734:	89 e0       	ldi	r24, 0x09	; 9
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	28 c0       	rjmp	.+80     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button='/';
    273a:	8f e2       	ldi	r24, 0x2F	; 47
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	25 c0       	rjmp	.+74     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button=4;
    2740:	84 e0       	ldi	r24, 0x04	; 4
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	22 c0       	rjmp	.+68     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button=5;
    2746:	85 e0       	ldi	r24, 0x05	; 5
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	1f c0       	rjmp	.+62     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button=6;
    274c:	86 e0       	ldi	r24, 0x06	; 6
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	1c c0       	rjmp	.+56     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button='x';
    2752:	88 e7       	ldi	r24, 0x78	; 120
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	19 c0       	rjmp	.+50     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button=1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	16 c0       	rjmp	.+44     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button=2;
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	13 c0       	rjmp	.+38     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button=3;
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	10 c0       	rjmp	.+32     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button='-';
    276a:	8d e2       	ldi	r24, 0x2D	; 45
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	0d c0       	rjmp	.+26     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button='C';
    2770:	83 e4       	ldi	r24, 0x43	; 67
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	0a c0       	rjmp	.+20     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button=0;
    2776:	19 82       	std	Y+1, r1	; 0x01
    2778:	08 c0       	rjmp	.+16     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button='=';
    277a:	8d e3       	ldi	r24, 0x3D	; 61
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	05 c0       	rjmp	.+10     	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button='+';
    2780:	8b e2       	ldi	r24, 0x2B	; 43
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	02 c0       	rjmp	.+4      	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button=button_number;
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    278a:	89 81       	ldd	r24, Y+1	; 0x01

}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	2e 97       	sbiw	r28, 0x0e	; 14
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	62 e0       	ldi	r22, 0x02	; 2
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_setupPinDirection>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 ea       	ldi	r26, 0xA0	; 160
    27c8:	b1 e4       	ldi	r27, 0x41	; 65
    27ca:	8b 87       	std	Y+11, r24	; 0x0b
    27cc:	9c 87       	std	Y+12, r25	; 0x0c
    27ce:	ad 87       	std	Y+13, r26	; 0x0d
    27d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a e7       	ldi	r20, 0x7A	; 122
    27e0:	53 e4       	ldi	r21, 0x43	; 67
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8f 83       	std	Y+7, r24	; 0x07
    27ec:	98 87       	std	Y+8, r25	; 0x08
    27ee:	a9 87       	std	Y+9, r26	; 0x09
    27f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <LCD_init+0x7a>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <LCD_init+0xda>
    2856:	89 e1       	ldi	r24, 0x19	; 25
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <LCD_init+0xc8>
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <LCD_init+0xbc>
    287c:	14 c0       	rjmp	.+40     	; 0x28a6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_init+0x104>
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
	/* LCD Power ON delay always > 15ms */
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE==8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	6f ef       	ldi	r22, 0xFF	; 255
    28aa:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    28ae:	88 e3       	ldi	r24, 0x38	; 56
    28b0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LCD_sendCommand>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    28b4:	8c e0       	ldi	r24, 0x0C	; 12
    28b6:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LCD_sendCommand>

	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LCD_sendCommand>
}
    28c0:	2e 96       	adiw	r28, 0x0e	; 14
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	e9 97       	sbiw	r28, 0x39	; 57
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	89 af       	std	Y+57, r24	; 0x39
	/* Instruction Mode RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e8       	ldi	r26, 0x80	; 128
    28f8:	bf e3       	ldi	r27, 0x3F	; 63
    28fa:	8d ab       	std	Y+53, r24	; 0x35
    28fc:	9e ab       	std	Y+54, r25	; 0x36
    28fe:	af ab       	std	Y+55, r26	; 0x37
    2900:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	6d a9       	ldd	r22, Y+53	; 0x35
    2904:	7e a9       	ldd	r23, Y+54	; 0x36
    2906:	8f a9       	ldd	r24, Y+55	; 0x37
    2908:	98 ad       	ldd	r25, Y+56	; 0x38
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a e7       	ldi	r20, 0x7A	; 122
    2910:	53 e4       	ldi	r21, 0x43	; 67
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	89 ab       	std	Y+49, r24	; 0x31
    291c:	9a ab       	std	Y+50, r25	; 0x32
    291e:	ab ab       	std	Y+51, r26	; 0x33
    2920:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2922:	69 a9       	ldd	r22, Y+49	; 0x31
    2924:	7a a9       	ldd	r23, Y+50	; 0x32
    2926:	8b a9       	ldd	r24, Y+51	; 0x33
    2928:	9c a9       	ldd	r25, Y+52	; 0x34
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <LCD_sendCommand+0x72>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	98 ab       	std	Y+48, r25	; 0x30
    2940:	8f a7       	std	Y+47, r24	; 0x2f
    2942:	3f c0       	rjmp	.+126    	; 0x29c2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2944:	69 a9       	ldd	r22, Y+49	; 0x31
    2946:	7a a9       	ldd	r23, Y+50	; 0x32
    2948:	8b a9       	ldd	r24, Y+51	; 0x33
    294a:	9c a9       	ldd	r25, Y+52	; 0x34
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	4c f5       	brge	.+82     	; 0x29ae <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	6d a9       	ldd	r22, Y+53	; 0x35
    295e:	7e a9       	ldd	r23, Y+54	; 0x36
    2960:	8f a9       	ldd	r24, Y+55	; 0x37
    2962:	98 ad       	ldd	r25, Y+56	; 0x38
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	98 ab       	std	Y+48, r25	; 0x30
    2982:	8f a7       	std	Y+47, r24	; 0x2f
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <LCD_sendCommand+0xd2>
    2986:	89 e1       	ldi	r24, 0x19	; 25
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9e a7       	std	Y+46, r25	; 0x2e
    298c:	8d a7       	std	Y+45, r24	; 0x2d
    298e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2990:	9e a5       	ldd	r25, Y+46	; 0x2e
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_sendCommand+0xc0>
    2996:	9e a7       	std	Y+46, r25	; 0x2e
    2998:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8f a5       	ldd	r24, Y+47	; 0x2f
    299c:	98 a9       	ldd	r25, Y+48	; 0x30
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <LCD_sendCommand+0xb4>
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	69 a9       	ldd	r22, Y+49	; 0x31
    29b0:	7a a9       	ldd	r23, Y+50	; 0x32
    29b2:	8b a9       	ldd	r24, Y+51	; 0x33
    29b4:	9c a9       	ldd	r25, Y+52	; 0x34
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	98 ab       	std	Y+48, r25	; 0x30
    29c0:	8f a7       	std	Y+47, r24	; 0x2f
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	98 a9       	ldd	r25, Y+48	; 0x30
    29c6:	9c a7       	std	Y+44, r25	; 0x2c
    29c8:	8b a7       	std	Y+43, r24	; 0x2b
    29ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    29cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_sendCommand+0xfc>
    29d2:	9c a7       	std	Y+44, r25	; 0x2c
    29d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* delay for processing Tas = 50ns */
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	62 e0       	ldi	r22, 0x02	; 2
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	8f a3       	std	Y+39, r24	; 0x27
    29ea:	98 a7       	std	Y+40, r25	; 0x28
    29ec:	a9 a7       	std	Y+41, r26	; 0x29
    29ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6f a1       	ldd	r22, Y+39	; 0x27
    29f2:	78 a5       	ldd	r23, Y+40	; 0x28
    29f4:	89 a5       	ldd	r24, Y+41	; 0x29
    29f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	53 e4       	ldi	r21, 0x43	; 67
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8b a3       	std	Y+35, r24	; 0x23
    2a0a:	9c a3       	std	Y+36, r25	; 0x24
    2a0c:	ad a3       	std	Y+37, r26	; 0x25
    2a0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a10:	6b a1       	ldd	r22, Y+35	; 0x23
    2a12:	7c a1       	ldd	r23, Y+36	; 0x24
    2a14:	8d a1       	ldd	r24, Y+37	; 0x25
    2a16:	9e a1       	ldd	r25, Y+38	; 0x26
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_sendCommand+0x160>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2a32:	6b a1       	ldd	r22, Y+35	; 0x23
    2a34:	7c a1       	ldd	r23, Y+36	; 0x24
    2a36:	8d a1       	ldd	r24, Y+37	; 0x25
    2a38:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9a a3       	std	Y+34, r25	; 0x22
    2a70:	89 a3       	std	Y+33, r24	; 0x21
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_sendCommand+0x1c0>
    2a74:	89 e1       	ldi	r24, 0x19	; 25
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	98 a3       	std	Y+32, r25	; 0x20
    2a7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_sendCommand+0x1ae>
    2a84:	98 a3       	std	Y+32, r25	; 0x20
    2a86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	89 a1       	ldd	r24, Y+33	; 0x21
    2a94:	9a a1       	ldd	r25, Y+34	; 0x22
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_sendCommand+0x1a2>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9a a3       	std	Y+34, r25	; 0x22
    2aae:	89 a3       	std	Y+33, r24	; 0x21
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_sendCommand+0x1ea>
    2ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);/* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE==8)

	/* out the required command to the data bus D0 --> D7 */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	69 ad       	ldd	r22, Y+57	; 0x39
    2ac8:	0e 94 3e 12 	call	0x247c	; 0x247c <GPIO_writePort>
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e8       	ldi	r26, 0x80	; 128
    2ad2:	bf e3       	ldi	r27, 0x3F	; 63
    2ad4:	89 8f       	std	Y+25, r24	; 0x19
    2ad6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad8:	ab 8f       	std	Y+27, r26	; 0x1b
    2ada:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2adc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a e7       	ldi	r20, 0x7A	; 122
    2aea:	53 e4       	ldi	r21, 0x43	; 67
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	8d 8b       	std	Y+21, r24	; 0x15
    2af6:	9e 8b       	std	Y+22, r25	; 0x16
    2af8:	af 8b       	std	Y+23, r26	; 0x17
    2afa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2afc:	6d 89       	ldd	r22, Y+21	; 0x15
    2afe:	7e 89       	ldd	r23, Y+22	; 0x16
    2b00:	8f 89       	ldd	r24, Y+23	; 0x17
    2b02:	98 8d       	ldd	r25, Y+24	; 0x18
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	2c f4       	brge	.+10     	; 0x2b1e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
    2b1c:	3f c0       	rjmp	.+126    	; 0x2b9c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b20:	7e 89       	ldd	r23, Y+22	; 0x16
    2b22:	8f 89       	ldd	r24, Y+23	; 0x17
    2b24:	98 8d       	ldd	r25, Y+24	; 0x18
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	4c f5       	brge	.+82     	; 0x2b88 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	69 8d       	ldd	r22, Y+25	; 0x19
    2b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9c 8b       	std	Y+20, r25	; 0x14
    2b5c:	8b 8b       	std	Y+19, r24	; 0x13
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <LCD_sendCommand+0x2ac>
    2b60:	89 e1       	ldi	r24, 0x19	; 25
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9a 8b       	std	Y+18, r25	; 0x12
    2b66:	89 8b       	std	Y+17, r24	; 0x11
    2b68:	89 89       	ldd	r24, Y+17	; 0x11
    2b6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <LCD_sendCommand+0x29a>
    2b70:	9a 8b       	std	Y+18, r25	; 0x12
    2b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	9c 89       	ldd	r25, Y+20	; 0x14
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b80:	9c 89       	ldd	r25, Y+20	; 0x14
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	69 f7       	brne	.-38     	; 0x2b60 <LCD_sendCommand+0x28e>
    2b86:	14 c0       	rjmp	.+40     	; 0x2bb0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9c 8b       	std	Y+20, r25	; 0x14
    2b9a:	8b 8b       	std	Y+19, r24	; 0x13
    2b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba0:	98 8b       	std	Y+16, r25	; 0x10
    2ba2:	8f 87       	std	Y+15, r24	; 0x0f
    2ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba6:	98 89       	ldd	r25, Y+16	; 0x10
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_sendCommand+0x2d6>
    2bac:	98 8b       	std	Y+16, r25	; 0x10
    2bae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);/* delay for processing Tdsw = 100ns */
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a e7       	ldi	r20, 0x7A	; 122
    2bd8:	53 e4       	ldi	r21, 0x43	; 67
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_sendCommand+0x39a>
    2c4e:	89 e1       	ldi	r24, 0x19	; 25
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_sendCommand+0x388>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_sendCommand+0x37c>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_sendCommand+0x3c4>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);/* delay for processing Th = 13ns */

#endif

}
    2c9e:	e9 96       	adiw	r28, 0x39	; 57
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 character)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	e9 97       	sbiw	r28, 0x39	; 57
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	89 af       	std	Y+57, r24	; 0x39
	/* Data Mode RS=1 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e8       	ldi	r26, 0x80	; 128
    2cd6:	bf e3       	ldi	r27, 0x3F	; 63
    2cd8:	8d ab       	std	Y+53, r24	; 0x35
    2cda:	9e ab       	std	Y+54, r25	; 0x36
    2cdc:	af ab       	std	Y+55, r26	; 0x37
    2cde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4a e7       	ldi	r20, 0x7A	; 122
    2cee:	53 e4       	ldi	r21, 0x43	; 67
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	89 ab       	std	Y+49, r24	; 0x31
    2cfa:	9a ab       	std	Y+50, r25	; 0x32
    2cfc:	ab ab       	std	Y+51, r26	; 0x33
    2cfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d00:	69 a9       	ldd	r22, Y+49	; 0x31
    2d02:	7a a9       	ldd	r23, Y+50	; 0x32
    2d04:	8b a9       	ldd	r24, Y+51	; 0x33
    2d06:	9c a9       	ldd	r25, Y+52	; 0x34
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	98 ab       	std	Y+48, r25	; 0x30
    2d1e:	8f a7       	std	Y+47, r24	; 0x2f
    2d20:	3f c0       	rjmp	.+126    	; 0x2da0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2d22:	69 a9       	ldd	r22, Y+49	; 0x31
    2d24:	7a a9       	ldd	r23, Y+50	; 0x32
    2d26:	8b a9       	ldd	r24, Y+51	; 0x33
    2d28:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	4c f5       	brge	.+82     	; 0x2d8c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d3c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d3e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d40:	98 ad       	ldd	r25, Y+56	; 0x38
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e2       	ldi	r20, 0x20	; 32
    2d48:	51 e4       	ldi	r21, 0x41	; 65
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	98 ab       	std	Y+48, r25	; 0x30
    2d60:	8f a7       	std	Y+47, r24	; 0x2f
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <LCD_displayCharacter+0xd2>
    2d64:	89 e1       	ldi	r24, 0x19	; 25
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e a7       	std	Y+46, r25	; 0x2e
    2d6a:	8d a7       	std	Y+45, r24	; 0x2d
    2d6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_displayCharacter+0xc0>
    2d74:	9e a7       	std	Y+46, r25	; 0x2e
    2d76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	98 ab       	std	Y+48, r25	; 0x30
    2d80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d84:	98 a9       	ldd	r25, Y+48	; 0x30
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <LCD_displayCharacter+0xb4>
    2d8a:	14 c0       	rjmp	.+40     	; 0x2db4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d90:	8b a9       	ldd	r24, Y+51	; 0x33
    2d92:	9c a9       	ldd	r25, Y+52	; 0x34
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	98 ab       	std	Y+48, r25	; 0x30
    2d9e:	8f a7       	std	Y+47, r24	; 0x2f
    2da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da2:	98 a9       	ldd	r25, Y+48	; 0x30
    2da4:	9c a7       	std	Y+44, r25	; 0x2c
    2da6:	8b a7       	std	Y+43, r24	; 0x2b
    2da8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2daa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_displayCharacter+0xfc>
    2db0:	9c a7       	std	Y+44, r25	; 0x2c
    2db2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* delay for processing Tas = 50ns */
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	62 e0       	ldi	r22, 0x02	; 2
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e8       	ldi	r26, 0x80	; 128
    2dc4:	bf e3       	ldi	r27, 0x3F	; 63
    2dc6:	8f a3       	std	Y+39, r24	; 0x27
    2dc8:	98 a7       	std	Y+40, r25	; 0x28
    2dca:	a9 a7       	std	Y+41, r26	; 0x29
    2dcc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a e7       	ldi	r20, 0x7A	; 122
    2ddc:	53 e4       	ldi	r21, 0x43	; 67
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8b a3       	std	Y+35, r24	; 0x23
    2de8:	9c a3       	std	Y+36, r25	; 0x24
    2dea:	ad a3       	std	Y+37, r26	; 0x25
    2dec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dee:	6b a1       	ldd	r22, Y+35	; 0x23
    2df0:	7c a1       	ldd	r23, Y+36	; 0x24
    2df2:	8d a1       	ldd	r24, Y+37	; 0x25
    2df4:	9e a1       	ldd	r25, Y+38	; 0x26
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	2c f4       	brge	.+10     	; 0x2e10 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9a a3       	std	Y+34, r25	; 0x22
    2e0c:	89 a3       	std	Y+33, r24	; 0x21
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2e10:	6b a1       	ldd	r22, Y+35	; 0x23
    2e12:	7c a1       	ldd	r23, Y+36	; 0x24
    2e14:	8d a1       	ldd	r24, Y+37	; 0x25
    2e16:	9e a1       	ldd	r25, Y+38	; 0x26
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	4c f5       	brge	.+82     	; 0x2e7a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	6f a1       	ldd	r22, Y+39	; 0x27
    2e2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9a a3       	std	Y+34, r25	; 0x22
    2e4e:	89 a3       	std	Y+33, r24	; 0x21
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_displayCharacter+0x1c0>
    2e52:	89 e1       	ldi	r24, 0x19	; 25
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	98 a3       	std	Y+32, r25	; 0x20
    2e58:	8f 8f       	std	Y+31, r24	; 0x1f
    2e5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_displayCharacter+0x1ae>
    2e62:	98 a3       	std	Y+32, r25	; 0x20
    2e64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	89 a1       	ldd	r24, Y+33	; 0x21
    2e68:	9a a1       	ldd	r25, Y+34	; 0x22
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9a a3       	std	Y+34, r25	; 0x22
    2e6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	89 a1       	ldd	r24, Y+33	; 0x21
    2e72:	9a a1       	ldd	r25, Y+34	; 0x22
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_displayCharacter+0x1a2>
    2e78:	14 c0       	rjmp	.+40     	; 0x2ea2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e80:	9e a1       	ldd	r25, Y+38	; 0x26
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9a a3       	std	Y+34, r25	; 0x22
    2e8c:	89 a3       	std	Y+33, r24	; 0x21
    2e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e90:	9a a1       	ldd	r25, Y+34	; 0x22
    2e92:	9e 8f       	std	Y+30, r25	; 0x1e
    2e94:	8d 8f       	std	Y+29, r24	; 0x1d
    2e96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <LCD_displayCharacter+0x1ea>
    2e9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);/* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE==8)

	/* out the required command to the data bus D0 --> D7 */
	GPIO_writePort(LCD_DATA_PORT_ID,character);
    2ea2:	82 e0       	ldi	r24, 0x02	; 2
    2ea4:	69 ad       	ldd	r22, Y+57	; 0x39
    2ea6:	0e 94 3e 12 	call	0x247c	; 0x247c <GPIO_writePort>
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	a0 e8       	ldi	r26, 0x80	; 128
    2eb0:	bf e3       	ldi	r27, 0x3F	; 63
    2eb2:	89 8f       	std	Y+25, r24	; 0x19
    2eb4:	9a 8f       	std	Y+26, r25	; 0x1a
    2eb6:	ab 8f       	std	Y+27, r26	; 0x1b
    2eb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eba:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a e7       	ldi	r20, 0x7A	; 122
    2ec8:	53 e4       	ldi	r21, 0x43	; 67
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	8d 8b       	std	Y+21, r24	; 0x15
    2ed4:	9e 8b       	std	Y+22, r25	; 0x16
    2ed6:	af 8b       	std	Y+23, r26	; 0x17
    2ed8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eda:	6d 89       	ldd	r22, Y+21	; 0x15
    2edc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ede:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e8       	ldi	r20, 0x80	; 128
    2ee8:	5f e3       	ldi	r21, 0x3F	; 63
    2eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eee:	88 23       	and	r24, r24
    2ef0:	2c f4       	brge	.+10     	; 0x2efc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	9c 8b       	std	Y+20, r25	; 0x14
    2ef8:	8b 8b       	std	Y+19, r24	; 0x13
    2efa:	3f c0       	rjmp	.+126    	; 0x2f7a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2efc:	6d 89       	ldd	r22, Y+21	; 0x15
    2efe:	7e 89       	ldd	r23, Y+22	; 0x16
    2f00:	8f 89       	ldd	r24, Y+23	; 0x17
    2f02:	98 8d       	ldd	r25, Y+24	; 0x18
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	3f ef       	ldi	r19, 0xFF	; 255
    2f08:	4f e7       	ldi	r20, 0x7F	; 127
    2f0a:	57 e4       	ldi	r21, 0x47	; 71
    2f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f10:	18 16       	cp	r1, r24
    2f12:	4c f5       	brge	.+82     	; 0x2f66 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f14:	69 8d       	ldd	r22, Y+25	; 0x19
    2f16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e2       	ldi	r20, 0x20	; 32
    2f22:	51 e4       	ldi	r21, 0x41	; 65
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	bc 01       	movw	r22, r24
    2f2e:	cd 01       	movw	r24, r26
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <LCD_displayCharacter+0x2ac>
    2f3e:	89 e1       	ldi	r24, 0x19	; 25
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9a 8b       	std	Y+18, r25	; 0x12
    2f44:	89 8b       	std	Y+17, r24	; 0x11
    2f46:	89 89       	ldd	r24, Y+17	; 0x11
    2f48:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <LCD_displayCharacter+0x29a>
    2f4e:	9a 8b       	std	Y+18, r25	; 0x12
    2f50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f52:	8b 89       	ldd	r24, Y+19	; 0x13
    2f54:	9c 89       	ldd	r25, Y+20	; 0x14
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	9c 8b       	std	Y+20, r25	; 0x14
    2f5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	69 f7       	brne	.-38     	; 0x2f3e <LCD_displayCharacter+0x28e>
    2f64:	14 c0       	rjmp	.+40     	; 0x2f8e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f66:	6d 89       	ldd	r22, Y+21	; 0x15
    2f68:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	9c 8b       	std	Y+20, r25	; 0x14
    2f78:	8b 8b       	std	Y+19, r24	; 0x13
    2f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7e:	98 8b       	std	Y+16, r25	; 0x10
    2f80:	8f 87       	std	Y+15, r24	; 0x0f
    2f82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f84:	98 89       	ldd	r25, Y+16	; 0x10
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <LCD_displayCharacter+0x2d6>
    2f8a:	98 8b       	std	Y+16, r25	; 0x10
    2f8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);/* delay for processing Tdsw = 100ns */
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 74 10 	call	0x20e8	; 0x20e8 <GPIO_writePin>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a0 e8       	ldi	r26, 0x80	; 128
    2f9e:	bf e3       	ldi	r27, 0x3F	; 63
    2fa0:	8b 87       	std	Y+11, r24	; 0x0b
    2fa2:	9c 87       	std	Y+12, r25	; 0x0c
    2fa4:	ad 87       	std	Y+13, r26	; 0x0d
    2fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a e7       	ldi	r20, 0x7A	; 122
    2fb6:	53 e4       	ldi	r21, 0x43	; 67
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8f 83       	std	Y+7, r24	; 0x07
    2fc2:	98 87       	std	Y+8, r25	; 0x08
    2fc4:	a9 87       	std	Y+9, r26	; 0x09
    2fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	3f c0       	rjmp	.+126    	; 0x3068 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	3f ef       	ldi	r19, 0xFF	; 255
    2ff6:	4f e7       	ldi	r20, 0x7F	; 127
    2ff8:	57 e4       	ldi	r21, 0x47	; 71
    2ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ffe:	18 16       	cp	r1, r24
    3000:	4c f5       	brge	.+82     	; 0x3054 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3002:	6b 85       	ldd	r22, Y+11	; 0x0b
    3004:	7c 85       	ldd	r23, Y+12	; 0x0c
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	9e 85       	ldd	r25, Y+14	; 0x0e
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
    302a:	0f c0       	rjmp	.+30     	; 0x304a <LCD_displayCharacter+0x39a>
    302c:	89 e1       	ldi	r24, 0x19	; 25
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c 83       	std	Y+4, r25	; 0x04
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_displayCharacter+0x388>
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <LCD_displayCharacter+0x37c>
    3052:	14 c0       	rjmp	.+40     	; 0x307c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	9a 83       	std	Y+2, r25	; 0x02
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <LCD_displayCharacter+0x3c4>
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);/* delay for processing Th = 13ns */

#endif
}
    307c:	e9 96       	adiw	r28, 0x39	; 57
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char* string)
{
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <LCD_displayString+0x6>
    3094:	0f 92       	push	r0
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	9b 83       	std	Y+3, r25	; 0x03
    309c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 str_index=0;
    309e:	19 82       	std	Y+1, r1	; 0x01
	for(str_index=0;string[str_index]!='\0';str_index++)
    30a0:	19 82       	std	Y+1, r1	; 0x01
    30a2:	0e c0       	rjmp	.+28     	; 0x30c0 <LCD_displayString+0x32>
	{
		LCD_displayCharacter(string[str_index]);
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	fc 01       	movw	r30, r24
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	80 81       	ld	r24, Z
    30b6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char* string)
{
	uint8 str_index=0;
	for(str_index=0;string[str_index]!='\0';str_index++)
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	fc 01       	movw	r30, r24
    30cc:	e2 0f       	add	r30, r18
    30ce:	f3 1f       	adc	r31, r19
    30d0:	80 81       	ld	r24, Z
    30d2:	88 23       	and	r24, r24
    30d4:	39 f7       	brne	.-50     	; 0x30a4 <LCD_displayString+0x16>
	{
		LCD_displayCharacter(string[str_index]);
	}
}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <LCD_moveCursor+0x6>
    30e8:	00 d0       	rcall	.+0      	; 0x30ea <LCD_moveCursor+0x8>
    30ea:	0f 92       	push	r0
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	3d 83       	std	Y+5, r19	; 0x05
    30fc:	2c 83       	std	Y+4, r18	; 0x04
    30fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3100:	9d 81       	ldd	r25, Y+5	; 0x05
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	91 05       	cpc	r25, r1
    3106:	c1 f0       	breq	.+48     	; 0x3138 <LCD_moveCursor+0x56>
    3108:	2c 81       	ldd	r18, Y+4	; 0x04
    310a:	3d 81       	ldd	r19, Y+5	; 0x05
    310c:	22 30       	cpi	r18, 0x02	; 2
    310e:	31 05       	cpc	r19, r1
    3110:	2c f4       	brge	.+10     	; 0x311c <LCD_moveCursor+0x3a>
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	9d 81       	ldd	r25, Y+5	; 0x05
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	61 f0       	breq	.+24     	; 0x3132 <LCD_moveCursor+0x50>
    311a:	19 c0       	rjmp	.+50     	; 0x314e <LCD_moveCursor+0x6c>
    311c:	2c 81       	ldd	r18, Y+4	; 0x04
    311e:	3d 81       	ldd	r19, Y+5	; 0x05
    3120:	22 30       	cpi	r18, 0x02	; 2
    3122:	31 05       	cpc	r19, r1
    3124:	69 f0       	breq	.+26     	; 0x3140 <LCD_moveCursor+0x5e>
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	9d 81       	ldd	r25, Y+5	; 0x05
    312a:	83 30       	cpi	r24, 0x03	; 3
    312c:	91 05       	cpc	r25, r1
    312e:	61 f0       	breq	.+24     	; 0x3148 <LCD_moveCursor+0x66>
    3130:	0e c0       	rjmp	.+28     	; 0x314e <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	0b c0       	rjmp	.+22     	; 0x314e <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	80 5c       	subi	r24, 0xC0	; 192
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	07 c0       	rjmp	.+14     	; 0x314e <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	80 5f       	subi	r24, 0xF0	; 240
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	03 c0       	rjmp	.+6      	; 0x314e <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	80 5b       	subi	r24, 0xB0	; 176
    314c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address|LCD_SET_CURSOR_LOCATION);
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	80 68       	ori	r24, 0x80	; 128
    3152:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LCD_sendCommand>

}
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char*string)
{
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	00 d0       	rcall	.+0      	; 0x316c <LCD_displayStringRowColumn+0x6>
    316c:	00 d0       	rcall	.+0      	; 0x316e <LCD_displayStringRowColumn+0x8>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	6a 83       	std	Y+2, r22	; 0x02
    3176:	5c 83       	std	Y+4, r21	; 0x04
    3178:	4b 83       	std	Y+3, r20	; 0x03
	/* go to to the required LCD position */
	LCD_moveCursor(row,col);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	6a 81       	ldd	r22, Y+2	; 0x02
    317e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_moveCursor>
	/* display the string */
	LCD_displayString(string);
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
}
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
	/* Send clear display command */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	0e 94 69 14 	call	0x28d2	; 0x28d2 <LCD_sendCommand>
}
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(long data)
{
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	64 97       	sbiw	r28, 0x14	; 20
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	69 8b       	std	Y+17, r22	; 0x11
    31c2:	7a 8b       	std	Y+18, r23	; 0x12
    31c4:	8b 8b       	std	Y+19, r24	; 0x13
    31c6:	9c 8b       	std	Y+20, r25	; 0x14
	/* String to hold the asci result */
	char buff[16];
	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	itoa(data,buff,10);
    31c8:	89 89       	ldd	r24, Y+17	; 0x11
    31ca:	9a 89       	ldd	r25, Y+18	; 0x12
    31cc:	9e 01       	movw	r18, r28
    31ce:	2f 5f       	subi	r18, 0xFF	; 255
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	b9 01       	movw	r22, r18
    31d4:	4a e0       	ldi	r20, 0x0A	; 10
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	/* Display the string */
	LCD_displayString(buff);
    31dc:	ce 01       	movw	r24, r28
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_displayString>
}
    31e4:	64 96       	adiw	r28, 0x14	; 20
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*ISR for the compare mode*/
ISR(TIMER1_COMPA_vect)
{
    31f6:	1f 92       	push	r1
    31f8:	0f 92       	push	r0
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	0f 92       	push	r0
    31fe:	11 24       	eor	r1, r1
    3200:	2f 93       	push	r18
    3202:	3f 93       	push	r19
    3204:	4f 93       	push	r20
    3206:	5f 93       	push	r21
    3208:	6f 93       	push	r22
    320a:	7f 93       	push	r23
    320c:	8f 93       	push	r24
    320e:	9f 93       	push	r25
    3210:	af 93       	push	r26
    3212:	bf 93       	push	r27
    3214:	ef 93       	push	r30
    3216:	ff 93       	push	r31
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    3220:	80 91 28 02 	lds	r24, 0x0228
    3224:	90 91 29 02 	lds	r25, 0x0229
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	29 f0       	breq	.+10     	; 0x3236 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    322c:	e0 91 28 02 	lds	r30, 0x0228
    3230:	f0 91 29 02 	lds	r31, 0x0229
    3234:	09 95       	icall
	}
}
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	ff 91       	pop	r31
    323c:	ef 91       	pop	r30
    323e:	bf 91       	pop	r27
    3240:	af 91       	pop	r26
    3242:	9f 91       	pop	r25
    3244:	8f 91       	pop	r24
    3246:	7f 91       	pop	r23
    3248:	6f 91       	pop	r22
    324a:	5f 91       	pop	r21
    324c:	4f 91       	pop	r20
    324e:	3f 91       	pop	r19
    3250:	2f 91       	pop	r18
    3252:	0f 90       	pop	r0
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	0f 90       	pop	r0
    3258:	1f 90       	pop	r1
    325a:	18 95       	reti

0000325c <__vector_9>:

/*ISR for the overflow mode*/
ISR(TIMER1_OVF_vect)
{
    325c:	1f 92       	push	r1
    325e:	0f 92       	push	r0
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	0f 92       	push	r0
    3264:	11 24       	eor	r1, r1
    3266:	2f 93       	push	r18
    3268:	3f 93       	push	r19
    326a:	4f 93       	push	r20
    326c:	5f 93       	push	r21
    326e:	6f 93       	push	r22
    3270:	7f 93       	push	r23
    3272:	8f 93       	push	r24
    3274:	9f 93       	push	r25
    3276:	af 93       	push	r26
    3278:	bf 93       	push	r27
    327a:	ef 93       	push	r30
    327c:	ff 93       	push	r31
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    3286:	80 91 28 02 	lds	r24, 0x0228
    328a:	90 91 29 02 	lds	r25, 0x0229
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	29 f0       	breq	.+10     	; 0x329c <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    3292:	e0 91 28 02 	lds	r30, 0x0228
    3296:	f0 91 29 02 	lds	r31, 0x0229
    329a:	09 95       	icall
	}
}
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	ff 91       	pop	r31
    32a2:	ef 91       	pop	r30
    32a4:	bf 91       	pop	r27
    32a6:	af 91       	pop	r26
    32a8:	9f 91       	pop	r25
    32aa:	8f 91       	pop	r24
    32ac:	7f 91       	pop	r23
    32ae:	6f 91       	pop	r22
    32b0:	5f 91       	pop	r21
    32b2:	4f 91       	pop	r20
    32b4:	3f 91       	pop	r19
    32b6:	2f 91       	pop	r18
    32b8:	0f 90       	pop	r0
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	0f 90       	pop	r0
    32be:	1f 90       	pop	r1
    32c0:	18 95       	reti

000032c2 <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <Timer1_init+0x6>
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <Timer1_init+0x8>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->mode)
    32d2:	e9 81       	ldd	r30, Y+1	; 0x01
    32d4:	fa 81       	ldd	r31, Y+2	; 0x02
    32d6:	85 81       	ldd	r24, Z+5	; 0x05
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	3c 83       	std	Y+4, r19	; 0x04
    32de:	2b 83       	std	Y+3, r18	; 0x03
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	31 f0       	breq	.+12     	; 0x32f4 <Timer1_init+0x32>
    32e8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ea:	3c 81       	ldd	r19, Y+4	; 0x04
    32ec:	21 30       	cpi	r18, 0x01	; 1
    32ee:	31 05       	cpc	r19, r1
    32f0:	e1 f0       	breq	.+56     	; 0x332a <Timer1_init+0x68>
    32f2:	3c c0       	rjmp	.+120    	; 0x336c <Timer1_init+0xaa>
	{
	case TIMER1_NORMAL_MODE:
		/*
		 * FOC1A=1 , FOC1B=1  ----> NON-PWM
		 */
		TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    32f4:	ef e4       	ldi	r30, 0x4F	; 79
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	8c e0       	ldi	r24, 0x0C	; 12
    32fa:	80 83       	st	Z, r24

		/*Assign initial value to TCNT1*/
		TCNT1=Config_Ptr->initial_value;
    32fc:	ac e4       	ldi	r26, 0x4C	; 76
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e9 81       	ldd	r30, Y+1	; 0x01
    3302:	fa 81       	ldd	r31, Y+2	; 0x02
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	11 96       	adiw	r26, 0x01	; 1
    330a:	9c 93       	st	X, r25
    330c:	8e 93       	st	-X, r24

		/*Enable Overflow mode interrupt*/
		TIMSK|=(1<<TOIE1);
    330e:	a9 e5       	ldi	r26, 0x59	; 89
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e9 e5       	ldi	r30, 0x59	; 89
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	84 60       	ori	r24, 0x04	; 4
    331a:	8c 93       	st	X, r24

		/*Set the clock prescaler and start the timer*/
		TCCR1B=(Config_Ptr->prescaler<<CS10);
    331c:	ae e4       	ldi	r26, 0x4E	; 78
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e9 81       	ldd	r30, Y+1	; 0x01
    3322:	fa 81       	ldd	r31, Y+2	; 0x02
    3324:	84 81       	ldd	r24, Z+4	; 0x04
    3326:	8c 93       	st	X, r24
    3328:	21 c0       	rjmp	.+66     	; 0x336c <Timer1_init+0xaa>
		break;
	case TIMER1_COMPARE_MODE:
		/*
		 * FOC1A=1 , FOC1B=1  ----> NON-PWM
		 */
		TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    332a:	ef e4       	ldi	r30, 0x4F	; 79
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	8c e0       	ldi	r24, 0x0C	; 12
    3330:	80 83       	st	Z, r24

		/*Assign the compare match value to OCR1A*/
		OCR1A=Config_Ptr->compare_value;
    3332:	aa e4       	ldi	r26, 0x4A	; 74
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	e9 81       	ldd	r30, Y+1	; 0x01
    3338:	fa 81       	ldd	r31, Y+2	; 0x02
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	11 96       	adiw	r26, 0x01	; 1
    3340:	9c 93       	st	X, r25
    3342:	8e 93       	st	-X, r24

		/*Assign initial value to TCNT1*/
		TCNT1=Config_Ptr->initial_value;
    3344:	ac e4       	ldi	r26, 0x4C	; 76
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	e9 81       	ldd	r30, Y+1	; 0x01
    334a:	fa 81       	ldd	r31, Y+2	; 0x02
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	11 96       	adiw	r26, 0x01	; 1
    3352:	9c 93       	st	X, r25
    3354:	8e 93       	st	-X, r24

		/*Enable compare mode interrupt*/
		TIMSK=(1<<OCIE1A);
    3356:	e9 e5       	ldi	r30, 0x59	; 89
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 e1       	ldi	r24, 0x10	; 16
    335c:	80 83       	st	Z, r24

		/*
		 * Set the clock prescaler and start the timer.
		 * WGM12=1 --> COMPARE MODE
		 */
		TCCR1B=(Config_Ptr->prescaler<<CS10)|(1<<WGM12);
    335e:	ae e4       	ldi	r26, 0x4E	; 78
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e9 81       	ldd	r30, Y+1	; 0x01
    3364:	fa 81       	ldd	r31, Y+2	; 0x02
    3366:	84 81       	ldd	r24, Z+4	; 0x04
    3368:	88 60       	ori	r24, 0x08	; 8
    336a:	8c 93       	st	X, r24
		break;
	}
}
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer driver.
 */
void Timer1_deInit(void)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	/*Reset all registers*/
	TCCR1A=0;
    3382:	ef e4       	ldi	r30, 0x4F	; 79
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	10 82       	st	Z, r1
	TCCR1B=0;
    3388:	ee e4       	ldi	r30, 0x4E	; 78
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1)&~(1<<OCIE1A);
    338e:	a9 e5       	ldi	r26, 0x59	; 89
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e9 e5       	ldi	r30, 0x59	; 89
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	8b 7e       	andi	r24, 0xEB	; 235
    339a:	8c 93       	st	X, r24
	TCNT1=0;
    339c:	ec e4       	ldi	r30, 0x4C	; 76
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	11 82       	std	Z+1, r1	; 0x01
    33a2:	10 82       	st	Z, r1
	OCR1A=0;
    33a4:	ea e4       	ldi	r30, 0x4A	; 74
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	11 82       	std	Z+1, r1	; 0x01
    33aa:	10 82       	st	Z, r1
}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <Timer1_setCallBack+0x6>
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the address of the call back function to the global pointer*/
	g_callBackPtr=a_ptr;
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	90 93 29 02 	sts	0x0229, r25
    33c8:	80 93 28 02 	sts	0x0228, r24
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType* Config_Ptr)
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	00 d0       	rcall	.+0      	; 0x33dc <UART_init+0x6>
    33dc:	00 d0       	rcall	.+0      	; 0x33de <UART_init+0x8>
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	9c 83       	std	Y+4, r25	; 0x04
    33e4:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * Variable to hold the calculated value responsible for determining the
	 * baud rate; this value is to be assigned to the UBRR register.
	 */
	uint16 ubrr=0;
    33e6:	1a 82       	std	Y+2, r1	; 0x02
    33e8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    33ea:	eb e2       	ldi	r30, 0x2B	; 43
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	80 83       	st	Z, r24
	 * RXCIE=0 -> receive with interrupt is disabled.
	 * RXEN, TXEN = 1 -> Enable TX and RX pins to work with UARt.
	 * UCSZ2 together with UCSZ1 and UCSZ0 specifies the character size in the UART frame.
	 *
	 */
	UCSRB=(1<<RXEN)|(1<<TXEN)|(GET_BIT(Config_Ptr->bit_data,2)<<UCSZ2);
    33f2:	aa e2       	ldi	r26, 0x2A	; 42
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	eb 81       	ldd	r30, Y+3	; 0x03
    33f8:	fc 81       	ldd	r31, Y+4	; 0x04
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	84 70       	andi	r24, 0x04	; 4
    33fe:	88 61       	ori	r24, 0x18	; 24
    3400:	8c 93       	st	X, r24
	 * 	(Note: we only do shift operation with UPM0 because it's the LSB, hence, it adjusts UPM1
	 * 	automatically because it's adjacent to UPM0 in the register.)
	 * USBS -> select the number of the stop bits in the UART frame.
	 * UCSZ1, and UCSZ0 together with UCSZ2 in UCSRB register specifies the character size in the UART frame.
	 */
	UCSRC=(1<<URSEL)|(Config_Ptr->parity<<UPM0)|\
    3402:	a0 e4       	ldi	r26, 0x40	; 64
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	eb 81       	ldd	r30, Y+3	; 0x03
    3408:	fc 81       	ldd	r31, Y+4	; 0x04
    340a:	80 81       	ld	r24, Z
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	82 95       	swap	r24
    3412:	92 95       	swap	r25
    3414:	90 7f       	andi	r25, 0xF0	; 240
    3416:	98 27       	eor	r25, r24
    3418:	80 7f       	andi	r24, 0xF0	; 240
    341a:	98 27       	eor	r25, r24
    341c:	28 2f       	mov	r18, r24
    341e:	20 68       	ori	r18, 0x80	; 128
    3420:	eb 81       	ldd	r30, Y+3	; 0x03
    3422:	fc 81       	ldd	r31, Y+4	; 0x04
    3424:	81 81       	ldd	r24, Z+1	; 0x01
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	88 0f       	add	r24, r24
    3430:	99 1f       	adc	r25, r25
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	28 2b       	or	r18, r24
    3438:	eb 81       	ldd	r30, Y+3	; 0x03
    343a:	fc 81       	ldd	r31, Y+4	; 0x04
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	81 70       	andi	r24, 0x01	; 1
    3444:	90 70       	andi	r25, 0x00	; 0
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	28 2b       	or	r18, r24
    344c:	eb 81       	ldd	r30, Y+3	; 0x03
    344e:	fc 81       	ldd	r31, Y+4	; 0x04
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	88 2f       	mov	r24, r24
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	82 70       	andi	r24, 0x02	; 2
    3458:	90 70       	andi	r25, 0x00	; 0
    345a:	95 95       	asr	r25
    345c:	87 95       	ror	r24
    345e:	88 0f       	add	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	82 2b       	or	r24, r18
    3468:	8c 93       	st	X, r24
			(Config_Ptr->stop_bit<<USBS)|(GET_BIT(Config_Ptr->bit_data,0)<<UCSZ0)\
			|(GET_BIT(Config_Ptr->bit_data,1)<<UCSZ1);

	/*Calculate the value to be stored in UBRR register to select the desired baud rate*/
	ubrr=(uint16)((float64)(UART_F_CPU)/(float64)(8*Config_Ptr->baud_rate))-1;
    346a:	eb 81       	ldd	r30, Y+3	; 0x03
    346c:	fc 81       	ldd	r31, Y+4	; 0x04
    346e:	83 81       	ldd	r24, Z+3	; 0x03
    3470:	94 81       	ldd	r25, Z+4	; 0x04
    3472:	a5 81       	ldd	r26, Z+5	; 0x05
    3474:	b6 81       	ldd	r27, Z+6	; 0x06
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	aa 1f       	adc	r26, r26
    347c:	bb 1f       	adc	r27, r27
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	aa 1f       	adc	r26, r26
    3484:	bb 1f       	adc	r27, r27
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	aa 1f       	adc	r26, r26
    348c:	bb 1f       	adc	r27, r27
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3496:	9b 01       	movw	r18, r22
    3498:	ac 01       	movw	r20, r24
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	74 e2       	ldi	r23, 0x24	; 36
    349e:	84 e7       	ldi	r24, 0x74	; 116
    34a0:	99 e4       	ldi	r25, 0x49	; 73
    34a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	9a 83       	std	Y+2, r25	; 0x02
    34ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Store the higher 4 bits first, to Clear URSEL bit as well, which indicates we're writing in
	 * UBRR register.
	 *
	 */
	UBRRH=ubrr>>8;
    34bc:	e0 e4       	ldi	r30, 0x40	; 64
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	89 2f       	mov	r24, r25
    34c6:	99 27       	eor	r25, r25
    34c8:	80 83       	st	Z, r24

	/*
	 * Then store the least 8 bits in UBRR.
	 * NOOTE: UBRR is a 12-bit register, divided into two 8- bit registers, UBBRL, and UBRRH.
	 */
	UBRRL=ubrr;
    34ca:	e9 e2       	ldi	r30, 0x29	; 41
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	80 83       	st	Z, r24
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * wait until UDR (data register is empty.
	 * UDRE in UCSRA is a flag ,when set indicates that the UDR register is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    34ec:	eb e2       	ldi	r30, 0x2B	; 43
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	80 72       	andi	r24, 0x20	; 32
    34f8:	90 70       	andi	r25, 0x00	; 0
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	b9 f3       	breq	.-18     	; 0x34ec <UART_sendByte+0xc>

	/*assign the data in UDR, and simultaneously start transmission.*/
	UDR=data;
    34fe:	ec e2       	ldi	r30, 0x2C	; 44
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	80 83       	st	Z, r24
}
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Wait until data is received.
	 * RXC in UCSRA is a flag, when set, it indicates that data has been received.
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3516:	eb e2       	ldi	r30, 0x2B	; 43
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	88 23       	and	r24, r24
    351e:	dc f7       	brge	.-10     	; 0x3516 <UART_recieveByte+0x8>

	/*return the received data, and automatically clear the RXC flag*/
	return UDR;
    3520:	ec e2       	ldi	r30, 0x2C	; 44
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
}
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	00 d0       	rcall	.+0      	; 0x3532 <UART_sendString+0x6>
    3532:	0f 92       	push	r0
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9b 83       	std	Y+3, r25	; 0x03
    353a:	8a 83       	std	Y+2, r24	; 0x02
	/*variable for string indexing*/
	uint8 str_index;

	/*Send the desired String byte by byte*/
	for(str_index=0;Str[str_index]!='\0';str_index++)
    353c:	19 82       	std	Y+1, r1	; 0x01
    353e:	0e c0       	rjmp	.+28     	; 0x355c <UART_sendString+0x30>
	{
		UART_sendByte(Str[str_index]);
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	fc 01       	movw	r30, r24
    354c:	e2 0f       	add	r30, r18
    354e:	f3 1f       	adc	r31, r19
    3550:	80 81       	ld	r24, Z
    3552:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <UART_sendByte>
{
	/*variable for string indexing*/
	uint8 str_index;

	/*Send the desired String byte by byte*/
	for(str_index=0;Str[str_index]!='\0';str_index++)
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	fc 01       	movw	r30, r24
    3568:	e2 0f       	add	r30, r18
    356a:	f3 1f       	adc	r31, r19
    356c:	80 81       	ld	r24, Z
    356e:	88 23       	and	r24, r24
    3570:	39 f7       	brne	.-50     	; 0x3540 <UART_sendString+0x14>
	{
		UART_sendByte(Str[str_index]);
	}
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <UART_receiveString+0xa>
    3588:	0f 92       	push	r0
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	9b 83       	std	Y+3, r25	; 0x03
    3590:	8a 83       	std	Y+2, r24	; 0x02
	/*variable for string indexing*/
	uint8 str_index=0;
    3592:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Receive first character to check whether it's '#' or not.
	 * NOTE: '#' indicates that the transmitter is done sending.
	 */
	Str[str_index]=UART_recieveByte();
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	8c 01       	movw	r16, r24
    35a0:	02 0f       	add	r16, r18
    35a2:	13 1f       	adc	r17, r19
    35a4:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    35a8:	f8 01       	movw	r30, r16
    35aa:	80 83       	st	Z, r24
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <UART_receiveString+0x4e>
		/*
		 * Receive the string byte by byte in the Str pointer.
		 * NOTE: Str is sent to the function by reference, meaning that it doesn't
		 * lose the data stored in it.
		 */
		str_index++;
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	8f 5f       	subi	r24, 0xFF	; 255
    35b2:	89 83       	std	Y+1, r24	; 0x01
		Str[str_index]=UART_recieveByte();
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	9b 81       	ldd	r25, Y+3	; 0x03
    35be:	8c 01       	movw	r16, r24
    35c0:	02 0f       	add	r16, r18
    35c2:	13 1f       	adc	r17, r19
    35c4:	0e 94 87 1a 	call	0x350e	; 0x350e <UART_recieveByte>
    35c8:	f8 01       	movw	r30, r16
    35ca:	80 83       	st	Z, r24
	/*
	 * Receive first character to check whether it's '#' or not.
	 * NOTE: '#' indicates that the transmitter is done sending.
	 */
	Str[str_index]=UART_recieveByte();
	while(Str[str_index]!='#')
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	fc 01       	movw	r30, r24
    35d8:	e2 0f       	add	r30, r18
    35da:	f3 1f       	adc	r31, r19
    35dc:	80 81       	ld	r24, Z
    35de:	83 32       	cpi	r24, 0x23	; 35
    35e0:	31 f7       	brne	.-52     	; 0x35ae <UART_receiveString+0x30>
		str_index++;
		Str[str_index]=UART_recieveByte();
	}

	/*Replace '#' with the NULL terminator '\0'*/
	Str[str_index]='\0';
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	9b 81       	ldd	r25, Y+3	; 0x03
    35ec:	fc 01       	movw	r30, r24
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	10 82       	st	Z, r1
}
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	08 95       	ret

00003604 <__prologue_saves__>:
    3604:	2f 92       	push	r2
    3606:	3f 92       	push	r3
    3608:	4f 92       	push	r4
    360a:	5f 92       	push	r5
    360c:	6f 92       	push	r6
    360e:	7f 92       	push	r7
    3610:	8f 92       	push	r8
    3612:	9f 92       	push	r9
    3614:	af 92       	push	r10
    3616:	bf 92       	push	r11
    3618:	cf 92       	push	r12
    361a:	df 92       	push	r13
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	ca 1b       	sub	r28, r26
    362e:	db 0b       	sbc	r29, r27
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	09 94       	ijmp

0000363c <__epilogue_restores__>:
    363c:	2a 88       	ldd	r2, Y+18	; 0x12
    363e:	39 88       	ldd	r3, Y+17	; 0x11
    3640:	48 88       	ldd	r4, Y+16	; 0x10
    3642:	5f 84       	ldd	r5, Y+15	; 0x0f
    3644:	6e 84       	ldd	r6, Y+14	; 0x0e
    3646:	7d 84       	ldd	r7, Y+13	; 0x0d
    3648:	8c 84       	ldd	r8, Y+12	; 0x0c
    364a:	9b 84       	ldd	r9, Y+11	; 0x0b
    364c:	aa 84       	ldd	r10, Y+10	; 0x0a
    364e:	b9 84       	ldd	r11, Y+9	; 0x09
    3650:	c8 84       	ldd	r12, Y+8	; 0x08
    3652:	df 80       	ldd	r13, Y+7	; 0x07
    3654:	ee 80       	ldd	r14, Y+6	; 0x06
    3656:	fd 80       	ldd	r15, Y+5	; 0x05
    3658:	0c 81       	ldd	r16, Y+4	; 0x04
    365a:	1b 81       	ldd	r17, Y+3	; 0x03
    365c:	aa 81       	ldd	r26, Y+2	; 0x02
    365e:	b9 81       	ldd	r27, Y+1	; 0x01
    3660:	ce 0f       	add	r28, r30
    3662:	d1 1d       	adc	r29, r1
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	ed 01       	movw	r28, r26
    3670:	08 95       	ret

00003672 <itoa>:
    3672:	fb 01       	movw	r30, r22
    3674:	9f 01       	movw	r18, r30
    3676:	e8 94       	clt
    3678:	42 30       	cpi	r20, 0x02	; 2
    367a:	c4 f0       	brlt	.+48     	; 0x36ac <itoa+0x3a>
    367c:	45 32       	cpi	r20, 0x25	; 37
    367e:	b4 f4       	brge	.+44     	; 0x36ac <itoa+0x3a>
    3680:	4a 30       	cpi	r20, 0x0A	; 10
    3682:	29 f4       	brne	.+10     	; 0x368e <itoa+0x1c>
    3684:	97 fb       	bst	r25, 7
    3686:	1e f4       	brtc	.+6      	; 0x368e <itoa+0x1c>
    3688:	90 95       	com	r25
    368a:	81 95       	neg	r24
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	64 2f       	mov	r22, r20
    3690:	77 27       	eor	r23, r23
    3692:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__udivmodhi4>
    3696:	80 5d       	subi	r24, 0xD0	; 208
    3698:	8a 33       	cpi	r24, 0x3A	; 58
    369a:	0c f0       	brlt	.+2      	; 0x369e <itoa+0x2c>
    369c:	89 5d       	subi	r24, 0xD9	; 217
    369e:	81 93       	st	Z+, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	a1 f7       	brne	.-24     	; 0x368e <itoa+0x1c>
    36a6:	16 f4       	brtc	.+4      	; 0x36ac <itoa+0x3a>
    36a8:	5d e2       	ldi	r21, 0x2D	; 45
    36aa:	51 93       	st	Z+, r21
    36ac:	10 82       	st	Z, r1
    36ae:	c9 01       	movw	r24, r18
    36b0:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <strrev>

000036b4 <strrev>:
    36b4:	dc 01       	movw	r26, r24
    36b6:	fc 01       	movw	r30, r24
    36b8:	67 2f       	mov	r22, r23
    36ba:	71 91       	ld	r23, Z+
    36bc:	77 23       	and	r23, r23
    36be:	e1 f7       	brne	.-8      	; 0x36b8 <strrev+0x4>
    36c0:	32 97       	sbiw	r30, 0x02	; 2
    36c2:	04 c0       	rjmp	.+8      	; 0x36cc <strrev+0x18>
    36c4:	7c 91       	ld	r23, X
    36c6:	6d 93       	st	X+, r22
    36c8:	70 83       	st	Z, r23
    36ca:	62 91       	ld	r22, -Z
    36cc:	ae 17       	cp	r26, r30
    36ce:	bf 07       	cpc	r27, r31
    36d0:	c8 f3       	brcs	.-14     	; 0x36c4 <strrev+0x10>
    36d2:	08 95       	ret

000036d4 <__udivmodhi4>:
    36d4:	aa 1b       	sub	r26, r26
    36d6:	bb 1b       	sub	r27, r27
    36d8:	51 e1       	ldi	r21, 0x11	; 17
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <__udivmodhi4_ep>

000036dc <__udivmodhi4_loop>:
    36dc:	aa 1f       	adc	r26, r26
    36de:	bb 1f       	adc	r27, r27
    36e0:	a6 17       	cp	r26, r22
    36e2:	b7 07       	cpc	r27, r23
    36e4:	10 f0       	brcs	.+4      	; 0x36ea <__udivmodhi4_ep>
    36e6:	a6 1b       	sub	r26, r22
    36e8:	b7 0b       	sbc	r27, r23

000036ea <__udivmodhi4_ep>:
    36ea:	88 1f       	adc	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	5a 95       	dec	r21
    36f0:	a9 f7       	brne	.-22     	; 0x36dc <__udivmodhi4_loop>
    36f2:	80 95       	com	r24
    36f4:	90 95       	com	r25
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	08 95       	ret

000036fc <_exit>:
    36fc:	f8 94       	cli

000036fe <__stop_program>:
    36fe:	ff cf       	rjmp	.-2      	; 0x36fe <__stop_program>
